// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module decoder_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        x_0_val,
        x_1_val,
        x_2_val,
        x_3_val,
        x_4_val,
        x_5_val,
        x_6_val,
        x_7_val,
        x_8_val,
        x_9_val,
        x_10_val,
        x_11_val,
        x_12_val,
        x_13_val,
        x_14_val,
        x_15_val,
        idx,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [16:0] x_0_val;
input  [16:0] x_1_val;
input  [16:0] x_2_val;
input  [16:0] x_3_val;
input  [16:0] x_4_val;
input  [16:0] x_5_val;
input  [16:0] x_6_val;
input  [16:0] x_7_val;
input  [16:0] x_8_val;
input  [16:0] x_9_val;
input  [16:0] x_10_val;
input  [16:0] x_11_val;
input  [16:0] x_12_val;
input  [16:0] x_13_val;
input  [16:0] x_14_val;
input  [16:0] x_15_val;
input  [3:0] idx;
output  [17:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
reg    ap_block_pp0_stage0_subdone;
wire  signed [17:0] select_ln50_fu_296_p3;
reg  signed [17:0] select_ln50_reg_528;
wire    ap_block_pp0_stage0_11001;
wire  signed [17:0] select_ln50_6_fu_422_p3;
reg  signed [17:0] select_ln50_6_reg_534;
wire   [16:0] tmp_fu_178_p21;
wire    ap_block_pp0_stage0;
wire   [16:0] tmp_fu_178_p23;
wire   [16:0] tmp_s_fu_230_p21;
wire   [16:0] tmp_s_fu_230_p23;
wire   [17:0] zext_ln50_fu_278_p1;
wire   [17:0] zext_ln43_fu_226_p1;
wire   [17:0] add_ln50_fu_282_p2;
wire   [0:0] tmp_53_fu_288_p3;
wire   [16:0] tmp_54_fu_304_p21;
wire   [16:0] tmp_54_fu_304_p23;
wire   [16:0] tmp_55_fu_356_p21;
wire   [16:0] tmp_55_fu_356_p23;
wire   [17:0] zext_ln50_1_fu_404_p1;
wire   [17:0] zext_ln43_1_fu_352_p1;
wire   [17:0] add_ln50_6_fu_408_p2;
wire   [0:0] tmp_56_fu_414_p3;
wire  signed [18:0] sext_ln50_6_fu_433_p1;
wire  signed [18:0] sext_ln50_fu_430_p1;
wire   [18:0] add_ln50_8_fu_440_p2;
wire   [17:0] add_ln50_7_fu_436_p2;
wire   [0:0] tmp_57_fu_446_p3;
wire   [0:0] tmp_58_fu_454_p3;
wire   [0:0] xor_ln50_fu_462_p2;
wire   [0:0] xor_ln50_6_fu_474_p2;
wire   [0:0] xor_ln50_7_fu_486_p2;
wire   [0:0] and_ln50_fu_468_p2;
wire   [0:0] xor_ln50_8_fu_492_p2;
wire   [0:0] and_ln50_3_fu_480_p2;
wire   [0:0] or_ln50_fu_498_p2;
wire   [17:0] select_ln50_7_fu_504_p3;
wire   [17:0] select_ln50_8_fu_512_p3;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to0;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [3:0] tmp_fu_178_p1;
wire   [3:0] tmp_fu_178_p3;
wire   [3:0] tmp_fu_178_p5;
wire   [3:0] tmp_fu_178_p7;
wire   [3:0] tmp_fu_178_p9;
wire  signed [3:0] tmp_fu_178_p11;
wire  signed [3:0] tmp_fu_178_p13;
wire  signed [3:0] tmp_fu_178_p15;
wire  signed [3:0] tmp_fu_178_p17;
wire  signed [3:0] tmp_fu_178_p19;
wire   [3:0] tmp_s_fu_230_p1;
wire   [3:0] tmp_s_fu_230_p3;
wire   [3:0] tmp_s_fu_230_p5;
wire   [3:0] tmp_s_fu_230_p7;
wire   [3:0] tmp_s_fu_230_p9;
wire  signed [3:0] tmp_s_fu_230_p11;
wire  signed [3:0] tmp_s_fu_230_p13;
wire  signed [3:0] tmp_s_fu_230_p15;
wire  signed [3:0] tmp_s_fu_230_p17;
wire  signed [3:0] tmp_s_fu_230_p19;
wire   [3:0] tmp_54_fu_304_p1;
wire   [3:0] tmp_54_fu_304_p3;
wire   [3:0] tmp_54_fu_304_p5;
wire   [3:0] tmp_54_fu_304_p7;
wire   [3:0] tmp_54_fu_304_p9;
wire  signed [3:0] tmp_54_fu_304_p11;
wire  signed [3:0] tmp_54_fu_304_p13;
wire  signed [3:0] tmp_54_fu_304_p15;
wire  signed [3:0] tmp_54_fu_304_p17;
wire  signed [3:0] tmp_54_fu_304_p19;
wire   [3:0] tmp_55_fu_356_p1;
wire   [3:0] tmp_55_fu_356_p3;
wire   [3:0] tmp_55_fu_356_p5;
wire   [3:0] tmp_55_fu_356_p7;
wire   [3:0] tmp_55_fu_356_p9;
wire  signed [3:0] tmp_55_fu_356_p11;
wire  signed [3:0] tmp_55_fu_356_p13;
wire  signed [3:0] tmp_55_fu_356_p15;
wire  signed [3:0] tmp_55_fu_356_p17;
wire  signed [3:0] tmp_55_fu_356_p19;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

(* dissolve_hierarchy = "yes" *) decoder_sparsemux_21_4_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 17 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 17 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 17 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 17 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 17 ),
    .CASE5( 4'h8 ),
    .din5_WIDTH( 17 ),
    .CASE6( 4'h9 ),
    .din6_WIDTH( 17 ),
    .CASE7( 4'hA ),
    .din7_WIDTH( 17 ),
    .CASE8( 4'hB ),
    .din8_WIDTH( 17 ),
    .CASE9( 4'hC ),
    .din9_WIDTH( 17 ),
    .def_WIDTH( 17 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 17 ))
sparsemux_21_4_17_1_1_U74(
    .din0(x_0_val),
    .din1(x_1_val),
    .din2(x_2_val),
    .din3(x_3_val),
    .din4(x_4_val),
    .din5(x_8_val),
    .din6(x_9_val),
    .din7(x_10_val),
    .din8(x_11_val),
    .din9(x_12_val),
    .def(tmp_fu_178_p21),
    .sel(idx),
    .dout(tmp_fu_178_p23)
);

(* dissolve_hierarchy = "yes" *) decoder_sparsemux_21_4_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 17 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 17 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 17 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 17 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 17 ),
    .CASE5( 4'h8 ),
    .din5_WIDTH( 17 ),
    .CASE6( 4'h9 ),
    .din6_WIDTH( 17 ),
    .CASE7( 4'hA ),
    .din7_WIDTH( 17 ),
    .CASE8( 4'hB ),
    .din8_WIDTH( 17 ),
    .CASE9( 4'hC ),
    .din9_WIDTH( 17 ),
    .def_WIDTH( 17 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 17 ))
sparsemux_21_4_17_1_1_U75(
    .din0(x_1_val),
    .din1(x_2_val),
    .din2(x_3_val),
    .din3(x_4_val),
    .din4(x_5_val),
    .din5(x_9_val),
    .din6(x_10_val),
    .din7(x_11_val),
    .din8(x_12_val),
    .din9(x_13_val),
    .def(tmp_s_fu_230_p21),
    .sel(idx),
    .dout(tmp_s_fu_230_p23)
);

(* dissolve_hierarchy = "yes" *) decoder_sparsemux_21_4_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 17 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 17 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 17 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 17 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 17 ),
    .CASE5( 4'h8 ),
    .din5_WIDTH( 17 ),
    .CASE6( 4'h9 ),
    .din6_WIDTH( 17 ),
    .CASE7( 4'hA ),
    .din7_WIDTH( 17 ),
    .CASE8( 4'hB ),
    .din8_WIDTH( 17 ),
    .CASE9( 4'hC ),
    .din9_WIDTH( 17 ),
    .def_WIDTH( 17 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 17 ))
sparsemux_21_4_17_1_1_U76(
    .din0(x_2_val),
    .din1(x_3_val),
    .din2(x_4_val),
    .din3(x_5_val),
    .din4(x_6_val),
    .din5(x_10_val),
    .din6(x_11_val),
    .din7(x_12_val),
    .din8(x_13_val),
    .din9(x_14_val),
    .def(tmp_54_fu_304_p21),
    .sel(idx),
    .dout(tmp_54_fu_304_p23)
);

(* dissolve_hierarchy = "yes" *) decoder_sparsemux_21_4_17_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 17 ),
    .CASE1( 4'h1 ),
    .din1_WIDTH( 17 ),
    .CASE2( 4'h2 ),
    .din2_WIDTH( 17 ),
    .CASE3( 4'h3 ),
    .din3_WIDTH( 17 ),
    .CASE4( 4'h4 ),
    .din4_WIDTH( 17 ),
    .CASE5( 4'h8 ),
    .din5_WIDTH( 17 ),
    .CASE6( 4'h9 ),
    .din6_WIDTH( 17 ),
    .CASE7( 4'hA ),
    .din7_WIDTH( 17 ),
    .CASE8( 4'hB ),
    .din8_WIDTH( 17 ),
    .CASE9( 4'hC ),
    .din9_WIDTH( 17 ),
    .def_WIDTH( 17 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 17 ))
sparsemux_21_4_17_1_1_U77(
    .din0(x_3_val),
    .din1(x_4_val),
    .din2(x_5_val),
    .din3(x_6_val),
    .din4(x_7_val),
    .din5(x_11_val),
    .din6(x_12_val),
    .din7(x_13_val),
    .din8(x_14_val),
    .din9(x_15_val),
    .def(tmp_55_fu_356_p21),
    .sel(idx),
    .dout(tmp_55_fu_356_p23)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_ce) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln50_6_reg_534 <= select_ln50_6_fu_422_p3;
        select_ln50_reg_528 <= select_ln50_fu_296_p3;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter0 == 1'b0)) begin
        ap_idle_pp0_0to0 = 1'b1;
    end else begin
        ap_idle_pp0_0to0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to0 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln50_6_fu_408_p2 = (zext_ln50_1_fu_404_p1 + zext_ln43_1_fu_352_p1);

assign add_ln50_7_fu_436_p2 = ($signed(select_ln50_6_reg_534) + $signed(select_ln50_reg_528));

assign add_ln50_8_fu_440_p2 = ($signed(sext_ln50_6_fu_433_p1) + $signed(sext_ln50_fu_430_p1));

assign add_ln50_fu_282_p2 = (zext_ln50_fu_278_p1 + zext_ln43_fu_226_p1);

assign and_ln50_3_fu_480_p2 = (xor_ln50_6_fu_474_p2 & tmp_57_fu_446_p3);

assign and_ln50_fu_468_p2 = (xor_ln50_fu_462_p2 & tmp_58_fu_454_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_subdone = (1'b0 == ap_ce);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln50_fu_498_p2[0:0] == 1'b1) ? select_ln50_7_fu_504_p3 : select_ln50_8_fu_512_p3);

assign or_ln50_fu_498_p2 = (xor_ln50_8_fu_492_p2 | and_ln50_fu_468_p2);

assign select_ln50_6_fu_422_p3 = ((tmp_56_fu_414_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_6_fu_408_p2);

assign select_ln50_7_fu_504_p3 = ((xor_ln50_7_fu_486_p2[0:0] == 1'b1) ? 18'd131071 : add_ln50_7_fu_436_p2);

assign select_ln50_8_fu_512_p3 = ((and_ln50_3_fu_480_p2[0:0] == 1'b1) ? 18'd131072 : add_ln50_7_fu_436_p2);

assign select_ln50_fu_296_p3 = ((tmp_53_fu_288_p3[0:0] == 1'b1) ? 18'd131071 : add_ln50_fu_282_p2);

assign sext_ln50_6_fu_433_p1 = select_ln50_6_reg_534;

assign sext_ln50_fu_430_p1 = select_ln50_reg_528;

assign tmp_53_fu_288_p3 = add_ln50_fu_282_p2[32'd17];

assign tmp_54_fu_304_p21 = 'bx;

assign tmp_55_fu_356_p21 = 'bx;

assign tmp_56_fu_414_p3 = add_ln50_6_fu_408_p2[32'd17];

assign tmp_57_fu_446_p3 = add_ln50_8_fu_440_p2[32'd18];

assign tmp_58_fu_454_p3 = add_ln50_7_fu_436_p2[32'd17];

assign tmp_fu_178_p21 = 'bx;

assign tmp_s_fu_230_p21 = 'bx;

assign xor_ln50_6_fu_474_p2 = (tmp_58_fu_454_p3 ^ 1'd1);

assign xor_ln50_7_fu_486_p2 = (tmp_58_fu_454_p3 ^ tmp_57_fu_446_p3);

assign xor_ln50_8_fu_492_p2 = (xor_ln50_7_fu_486_p2 ^ 1'd1);

assign xor_ln50_fu_462_p2 = (tmp_57_fu_446_p3 ^ 1'd1);

assign zext_ln43_1_fu_352_p1 = tmp_54_fu_304_p23;

assign zext_ln43_fu_226_p1 = tmp_fu_178_p23;

assign zext_ln50_1_fu_404_p1 = tmp_55_fu_356_p23;

assign zext_ln50_fu_278_p1 = tmp_s_fu_230_p23;

endmodule //decoder_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s
