// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="constraint_layer_top_constraint_layer_top,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.017500,HLS_SYN_LAT=22,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=554,HLS_SYN_LUT=720,HLS_VERSION=2024_1}" *)

module constraint_layer_top (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        encoded_input_0_ap_vld,
        encoded_input_1_ap_vld,
        encoded_output_0_ap_ack,
        encoded_output_1_ap_ack,
        encoded_input_0,
        encoded_input_0_ap_ack,
        encoded_input_1,
        encoded_input_1_ap_ack,
        encoded_output_0,
        encoded_output_0_ap_vld,
        encoded_output_1,
        encoded_output_1_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   encoded_input_0_ap_vld;
input   encoded_input_1_ap_vld;
input   encoded_output_0_ap_ack;
input   encoded_output_1_ap_ack;
input  [15:0] encoded_input_0;
output   encoded_input_0_ap_ack;
input  [15:0] encoded_input_1;
output   encoded_input_1_ap_ack;
output  [15:0] encoded_output_0;
output   encoded_output_0_ap_vld;
output  [15:0] encoded_output_1;
output   encoded_output_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg encoded_input_0_ap_ack;
reg encoded_input_1_ap_ack;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter13;
reg    ap_enable_reg_pp0_iter14;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
reg    ap_enable_reg_pp0_iter19;
reg    ap_enable_reg_pp0_iter20;
reg    ap_enable_reg_pp0_iter21;
reg    ap_enable_reg_pp0_iter22;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state22_pp0_stage0_iter21;
reg    ap_block_state22_io;
wire    regslice_both_encoded_output_0_U_apdone_blk;
wire    regslice_both_encoded_output_1_U_apdone_blk;
reg    ap_block_state23_pp0_stage0_iter22;
reg    ap_block_state23_io;
reg    ap_block_pp0_stage0_subdone;
reg    encoded_input_0_blk_n;
wire    ap_block_pp0_stage0;
reg    encoded_input_1_blk_n;
reg    encoded_output_0_blk_n;
reg    encoded_output_1_blk_n;
wire  signed [25:0] sext_ln13_fu_180_p1;
reg  signed [25:0] sext_ln13_reg_866;
reg    ap_block_pp0_stage0_11001;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter1_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter2_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter3_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter4_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter5_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter6_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter7_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter8_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter9_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter10_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter11_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter12_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter13_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter14_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter15_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter16_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter17_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter18_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter19_reg;
reg  signed [25:0] sext_ln13_reg_866_pp0_iter20_reg;
reg   [15:0] encoded_input_1_read_reg_873;
wire  signed [25:0] sext_ln13_1_fu_184_p1;
reg  signed [25:0] sext_ln13_1_reg_878;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter2_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter3_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter4_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter5_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter6_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter7_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter8_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter9_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter10_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter11_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter12_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter13_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter14_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter15_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter16_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter17_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter18_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter19_reg;
reg  signed [25:0] sext_ln13_1_reg_878_pp0_iter20_reg;
wire   [25:0] mul_ln13_1_fu_187_p2;
reg  signed [25:0] mul_ln13_1_reg_883;
wire   [0:0] bit_sel_fu_212_p3;
reg   [0:0] bit_sel_reg_888;
wire   [0:0] xor_ln91_fu_220_p2;
reg   [0:0] xor_ln91_reg_894;
reg   [6:0] tmp_2_reg_900;
wire   [1:0] q_1_2_in_in_i_fu_309_p3;
reg   [1:0] q_1_2_in_in_i_reg_905;
wire   [9:0] s_3_fu_317_p3;
reg   [9:0] s_3_reg_913;
reg   [0:0] tmp_3_reg_918;
wire   [3:0] q_1_4_in_in_i_fu_452_p3;
reg   [3:0] q_1_4_in_in_i_reg_924;
wire   [9:0] s_9_fu_460_p3;
reg   [9:0] s_9_reg_932;
reg   [0:0] tmp_6_reg_937;
wire   [5:0] q_1_6_in_in_i_fu_595_p3;
reg   [5:0] q_1_6_in_in_i_reg_943;
wire   [9:0] s_15_fu_603_p3;
reg   [9:0] s_15_reg_951;
reg   [0:0] tmp_9_reg_956;
wire   [0:0] tmp_11_fu_706_p3;
reg   [0:0] tmp_11_reg_962;
wire   [9:0] s_19_fu_728_p2;
reg   [9:0] s_19_reg_967;
wire   [9:0] s_20_fu_742_p2;
reg   [9:0] s_20_reg_972;
wire   [6:0] empty_fu_752_p3;
reg   [6:0] empty_reg_977;
wire   [7:0] grp_fu_805_p2;
reg   [7:0] udiv_ln15_reg_988;
reg    ap_block_pp0_stage0_01001;
wire  signed [15:0] mul_ln13_1_fu_187_p0;
wire  signed [15:0] mul_ln13_1_fu_187_p1;
wire  signed [25:0] grp_fu_858_p3;
wire   [7:0] tmp_fu_193_p4;
wire   [8:0] zext_ln91_fu_202_p1;
wire   [8:0] add_ln91_fu_206_p2;
wire   [9:0] shl_ln_fu_236_p4;
wire   [9:0] s_fu_244_p2;
wire   [9:0] and_ln91_1_fu_278_p3;
wire   [9:0] shl_ln95_fu_272_p2;
wire   [9:0] add_ln91_2_fu_285_p2;
wire   [9:0] add_ln95_fu_297_p2;
wire   [0:0] tmp_1_fu_264_p3;
wire   [1:0] q_star_fu_257_p3;
wire   [1:0] q_fu_250_p3;
wire   [9:0] s_2_fu_303_p2;
wire   [9:0] s_1_fu_291_p2;
wire   [9:0] shl_ln95_1_fu_333_p2;
wire   [9:0] or_ln_fu_338_p3;
wire   [9:0] or_ln1_fu_358_p3;
wire   [3:0] q_star_2_fu_371_p3;
wire   [3:0] q_star_1_fu_351_p3;
wire   [9:0] s_5_fu_365_p2;
wire   [9:0] s_4_fu_345_p2;
wire   [3:0] q_star_3_fu_378_p3;
wire   [2:0] tmp_5_fu_392_p4;
wire   [9:0] s_6_fu_385_p3;
wire   [9:0] shl_ln95_2_fu_418_p2;
wire   [9:0] or_ln91_1_fu_424_p3;
wire   [9:0] or_ln96_1_fu_438_p3;
wire   [0:0] tmp_4_fu_410_p3;
wire   [3:0] q_1_fu_402_p3;
wire   [9:0] s_8_fu_446_p2;
wire   [9:0] s_7_fu_432_p2;
wire   [9:0] shl_ln95_3_fu_476_p2;
wire   [9:0] or_ln91_2_fu_481_p3;
wire   [9:0] or_ln96_2_fu_501_p3;
wire   [5:0] q_star_5_fu_514_p3;
wire   [5:0] q_star_4_fu_494_p3;
wire   [9:0] s_11_fu_508_p2;
wire   [9:0] s_10_fu_488_p2;
wire   [5:0] q_star_6_fu_521_p3;
wire   [4:0] tmp_8_fu_535_p4;
wire   [9:0] s_12_fu_528_p3;
wire   [9:0] shl_ln95_4_fu_561_p2;
wire   [9:0] or_ln91_3_fu_567_p3;
wire   [9:0] or_ln96_3_fu_581_p3;
wire   [0:0] tmp_7_fu_553_p3;
wire   [5:0] q_2_fu_545_p3;
wire   [9:0] s_14_fu_589_p2;
wire   [9:0] s_13_fu_575_p2;
wire   [9:0] shl_ln95_5_fu_619_p2;
wire   [9:0] or_ln91_4_fu_624_p3;
wire   [9:0] or_ln96_4_fu_644_p3;
wire   [7:0] q_star_8_fu_657_p3;
wire   [7:0] q_star_7_fu_637_p3;
wire   [9:0] s_17_fu_651_p2;
wire   [9:0] s_16_fu_631_p2;
wire   [7:0] q_star_9_fu_664_p3;
wire   [5:0] tmp_10_fu_688_p4;
wire   [9:0] s_18_fu_671_p3;
wire   [6:0] tmp_s_fu_678_p4;
wire   [9:0] shl_ln91_fu_714_p2;
wire   [9:0] or_ln91_5_fu_720_p3;
wire   [9:0] or_ln96_5_fu_734_p3;
wire   [6:0] trunc_ln97_fu_748_p1;
wire   [6:0] or_ln80_1_fu_698_p3;
wire   [9:0] s_21_fu_760_p3;
wire   [7:0] q_3_fu_765_p3;
wire   [7:0] add_ln103_fu_778_p2;
wire   [0:0] icmp_ln102_fu_772_p2;
wire   [6:0] tmp_12_fu_784_p4;
wire   [6:0] select_ln102_fu_794_p3;
wire   [6:0] grp_fu_805_p1;
wire   [7:0] trunc_ln17_fu_811_p1;
wire   [13:0] shl_ln2_fu_814_p3;
wire   [13:0] mul_ln17_fu_826_p0;
wire   [25:0] zext_ln17_fu_822_p1;
wire  signed [15:0] mul_ln17_fu_826_p1;
wire   [25:0] mul_ln17_fu_826_p2;
wire   [13:0] mul_ln19_fu_842_p0;
wire  signed [15:0] mul_ln19_fu_842_p1;
wire   [25:0] mul_ln19_fu_842_p2;
wire  signed [15:0] grp_fu_858_p0;
wire  signed [15:0] grp_fu_858_p1;
reg    grp_fu_805_ce;
reg    grp_fu_858_ce;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to21;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [15:0] encoded_output_0_int_regslice;
reg    encoded_output_0_ap_vld_int_regslice;
wire    encoded_output_0_ap_ack_int_regslice;
wire    regslice_both_encoded_output_0_U_vld_out;
wire   [15:0] encoded_output_1_int_regslice;
reg    encoded_output_1_ap_vld_int_regslice;
wire    encoded_output_1_ap_ack_int_regslice;
wire    regslice_both_encoded_output_1_U_vld_out;
wire   [8:0] grp_fu_805_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter20 = 1'b0;
#0 ap_enable_reg_pp0_iter21 = 1'b0;
#0 ap_enable_reg_pp0_iter22 = 1'b0;
end

constraint_layer_top_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_16s_16s_26_1_1_U1(
    .din0(mul_ln13_1_fu_187_p0),
    .din1(mul_ln13_1_fu_187_p1),
    .dout(mul_ln13_1_fu_187_p2)
);

constraint_layer_top_udiv_9s_7ns_8_13_1 #(
    .ID( 1 ),
    .NUM_STAGE( 13 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 7 ),
    .dout_WIDTH( 8 ))
udiv_9s_7ns_8_13_1_U2(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(9'd352),
    .din1(grp_fu_805_p1),
    .ce(grp_fu_805_ce),
    .dout(grp_fu_805_p2)
);

constraint_layer_top_mul_14ns_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_14ns_16s_26_1_1_U3(
    .din0(mul_ln17_fu_826_p0),
    .din1(mul_ln17_fu_826_p1),
    .dout(mul_ln17_fu_826_p2)
);

constraint_layer_top_mul_14ns_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 14 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
mul_14ns_16s_26_1_1_U4(
    .din0(mul_ln19_fu_842_p0),
    .din1(mul_ln19_fu_842_p1),
    .dout(mul_ln19_fu_842_p2)
);

constraint_layer_top_mac_muladd_16s_16s_26s_26_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
mac_muladd_16s_16s_26s_26_4_1_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_858_p0),
    .din1(grp_fu_858_p1),
    .din2(mul_ln13_1_reg_883),
    .ce(grp_fu_858_ce),
    .dout(grp_fu_858_p3)
);

constraint_layer_top_regslice_both #(
    .DataWidth( 16 ))
regslice_both_encoded_output_0_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(encoded_output_0_int_regslice),
    .vld_in(encoded_output_0_ap_vld_int_regslice),
    .ack_in(encoded_output_0_ap_ack_int_regslice),
    .data_out(encoded_output_0),
    .vld_out(regslice_both_encoded_output_0_U_vld_out),
    .ack_out(encoded_output_0_ap_ack),
    .apdone_blk(regslice_both_encoded_output_0_U_apdone_blk)
);

constraint_layer_top_regslice_both #(
    .DataWidth( 16 ))
regslice_both_encoded_output_1_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .data_in(encoded_output_1_int_regslice),
    .vld_in(encoded_output_1_ap_vld_int_regslice),
    .ack_in(encoded_output_1_ap_ack_int_regslice),
    .data_out(encoded_output_1),
    .vld_out(regslice_both_encoded_output_1_U_vld_out),
    .ack_out(encoded_output_1_ap_ack),
    .apdone_blk(regslice_both_encoded_output_1_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter20 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter21 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter22 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        bit_sel_reg_888 <= add_ln91_fu_206_p2[32'd8];
        empty_reg_977 <= empty_fu_752_p3;
        q_1_2_in_in_i_reg_905 <= q_1_2_in_in_i_fu_309_p3;
        q_1_4_in_in_i_reg_924 <= q_1_4_in_in_i_fu_452_p3;
        q_1_6_in_in_i_reg_943 <= q_1_6_in_in_i_fu_595_p3;
        s_15_reg_951[9 : 5] <= s_15_fu_603_p3[9 : 5];
        s_19_reg_967[9 : 3] <= s_19_fu_728_p2[9 : 3];
        s_20_reg_972[9 : 3] <= s_20_fu_742_p2[9 : 3];
        s_3_reg_913[9 : 3] <= s_3_fu_317_p3[9 : 3];
        s_9_reg_932[9 : 5] <= s_9_fu_460_p3[9 : 5];
        sext_ln13_1_reg_878_pp0_iter10_reg <= sext_ln13_1_reg_878_pp0_iter9_reg;
        sext_ln13_1_reg_878_pp0_iter11_reg <= sext_ln13_1_reg_878_pp0_iter10_reg;
        sext_ln13_1_reg_878_pp0_iter12_reg <= sext_ln13_1_reg_878_pp0_iter11_reg;
        sext_ln13_1_reg_878_pp0_iter13_reg <= sext_ln13_1_reg_878_pp0_iter12_reg;
        sext_ln13_1_reg_878_pp0_iter14_reg <= sext_ln13_1_reg_878_pp0_iter13_reg;
        sext_ln13_1_reg_878_pp0_iter15_reg <= sext_ln13_1_reg_878_pp0_iter14_reg;
        sext_ln13_1_reg_878_pp0_iter16_reg <= sext_ln13_1_reg_878_pp0_iter15_reg;
        sext_ln13_1_reg_878_pp0_iter17_reg <= sext_ln13_1_reg_878_pp0_iter16_reg;
        sext_ln13_1_reg_878_pp0_iter18_reg <= sext_ln13_1_reg_878_pp0_iter17_reg;
        sext_ln13_1_reg_878_pp0_iter19_reg <= sext_ln13_1_reg_878_pp0_iter18_reg;
        sext_ln13_1_reg_878_pp0_iter20_reg <= sext_ln13_1_reg_878_pp0_iter19_reg;
        sext_ln13_1_reg_878_pp0_iter2_reg <= sext_ln13_1_reg_878;
        sext_ln13_1_reg_878_pp0_iter3_reg <= sext_ln13_1_reg_878_pp0_iter2_reg;
        sext_ln13_1_reg_878_pp0_iter4_reg <= sext_ln13_1_reg_878_pp0_iter3_reg;
        sext_ln13_1_reg_878_pp0_iter5_reg <= sext_ln13_1_reg_878_pp0_iter4_reg;
        sext_ln13_1_reg_878_pp0_iter6_reg <= sext_ln13_1_reg_878_pp0_iter5_reg;
        sext_ln13_1_reg_878_pp0_iter7_reg <= sext_ln13_1_reg_878_pp0_iter6_reg;
        sext_ln13_1_reg_878_pp0_iter8_reg <= sext_ln13_1_reg_878_pp0_iter7_reg;
        sext_ln13_1_reg_878_pp0_iter9_reg <= sext_ln13_1_reg_878_pp0_iter8_reg;
        sext_ln13_reg_866_pp0_iter10_reg <= sext_ln13_reg_866_pp0_iter9_reg;
        sext_ln13_reg_866_pp0_iter11_reg <= sext_ln13_reg_866_pp0_iter10_reg;
        sext_ln13_reg_866_pp0_iter12_reg <= sext_ln13_reg_866_pp0_iter11_reg;
        sext_ln13_reg_866_pp0_iter13_reg <= sext_ln13_reg_866_pp0_iter12_reg;
        sext_ln13_reg_866_pp0_iter14_reg <= sext_ln13_reg_866_pp0_iter13_reg;
        sext_ln13_reg_866_pp0_iter15_reg <= sext_ln13_reg_866_pp0_iter14_reg;
        sext_ln13_reg_866_pp0_iter16_reg <= sext_ln13_reg_866_pp0_iter15_reg;
        sext_ln13_reg_866_pp0_iter17_reg <= sext_ln13_reg_866_pp0_iter16_reg;
        sext_ln13_reg_866_pp0_iter18_reg <= sext_ln13_reg_866_pp0_iter17_reg;
        sext_ln13_reg_866_pp0_iter19_reg <= sext_ln13_reg_866_pp0_iter18_reg;
        sext_ln13_reg_866_pp0_iter20_reg <= sext_ln13_reg_866_pp0_iter19_reg;
        sext_ln13_reg_866_pp0_iter2_reg <= sext_ln13_reg_866_pp0_iter1_reg;
        sext_ln13_reg_866_pp0_iter3_reg <= sext_ln13_reg_866_pp0_iter2_reg;
        sext_ln13_reg_866_pp0_iter4_reg <= sext_ln13_reg_866_pp0_iter3_reg;
        sext_ln13_reg_866_pp0_iter5_reg <= sext_ln13_reg_866_pp0_iter4_reg;
        sext_ln13_reg_866_pp0_iter6_reg <= sext_ln13_reg_866_pp0_iter5_reg;
        sext_ln13_reg_866_pp0_iter7_reg <= sext_ln13_reg_866_pp0_iter6_reg;
        sext_ln13_reg_866_pp0_iter8_reg <= sext_ln13_reg_866_pp0_iter7_reg;
        sext_ln13_reg_866_pp0_iter9_reg <= sext_ln13_reg_866_pp0_iter8_reg;
        tmp_11_reg_962 <= s_18_fu_671_p3[32'd9];
        tmp_2_reg_900 <= {{add_ln91_fu_206_p2[7:1]}};
        tmp_3_reg_918 <= s_3_fu_317_p3[32'd9];
        tmp_6_reg_937 <= s_9_fu_460_p3[32'd9];
        tmp_9_reg_956 <= s_15_fu_603_p3[32'd9];
        udiv_ln15_reg_988 <= grp_fu_805_p2;
        xor_ln91_reg_894 <= xor_ln91_fu_220_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        encoded_input_1_read_reg_873 <= encoded_input_1;
        mul_ln13_1_reg_883 <= mul_ln13_1_fu_187_p2;
        sext_ln13_1_reg_878 <= sext_ln13_1_fu_184_p1;
        sext_ln13_reg_866 <= sext_ln13_fu_180_p1;
        sext_ln13_reg_866_pp0_iter1_reg <= sext_ln13_reg_866;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter22 == 1'b0) & (ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b0) & (ap_enable_reg_pp0_iter20 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to21 = 1'b1;
    end else begin
        ap_idle_pp0_0to21 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_idle_pp0_0to21 == 1'b1) & (ap_start == 1'b0))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        encoded_input_0_ap_ack = 1'b1;
    end else begin
        encoded_input_0_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        encoded_input_0_blk_n = encoded_input_0_ap_vld;
    end else begin
        encoded_input_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        encoded_input_1_ap_ack = 1'b1;
    end else begin
        encoded_input_1_ap_ack = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        encoded_input_1_blk_n = encoded_input_1_ap_vld;
    end else begin
        encoded_input_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        encoded_output_0_ap_vld_int_regslice = 1'b1;
    end else begin
        encoded_output_0_ap_vld_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        encoded_output_0_blk_n = encoded_output_0_ap_ack_int_regslice;
    end else begin
        encoded_output_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        encoded_output_1_ap_vld_int_regslice = 1'b1;
    end else begin
        encoded_output_1_ap_vld_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b0 == ap_block_pp0_stage0)) | ((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b0 == ap_block_pp0_stage0)))) begin
        encoded_output_1_blk_n = encoded_output_1_ap_ack_int_regslice;
    end else begin
        encoded_output_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_805_ce = 1'b1;
    end else begin
        grp_fu_805_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        grp_fu_858_ce = 1'b1;
    end else begin
        grp_fu_858_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln103_fu_778_p2 = (q_3_fu_765_p3 + 8'd1);

assign add_ln91_2_fu_285_p2 = ($signed(and_ln91_1_fu_278_p3) + $signed(10'd832));

assign add_ln91_fu_206_p2 = (zext_ln91_fu_202_p1 + 9'd1);

assign add_ln95_fu_297_p2 = ($signed(shl_ln95_fu_272_p2) + $signed(10'd704));

assign and_ln91_1_fu_278_p3 = {{xor_ln91_reg_894}, {9'd0}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter22 == 1'b1) & (1'b1 == ap_block_state23_pp0_stage0_iter22)) | ((ap_enable_reg_pp0_iter21 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage0_iter21)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter22 == 1'b1) & ((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23_pp0_stage0_iter22))) | ((ap_enable_reg_pp0_iter21 == 1'b1) & ((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22_pp0_stage0_iter21))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_start == 1'b1) & (1'b1 == ap_block_state1_pp0_stage0_iter0)) | ((ap_enable_reg_pp0_iter22 == 1'b1) & ((1'b1 == ap_block_state23_io) | (1'b1 == ap_block_state23_pp0_stage0_iter22))) | ((ap_enable_reg_pp0_iter21 == 1'b1) & ((1'b1 == ap_block_state22_io) | (1'b1 == ap_block_state22_pp0_stage0_iter21))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((encoded_input_1_ap_vld == 1'b0) | (encoded_input_0_ap_vld == 1'b0));
end

always @ (*) begin
    ap_block_state22_io = ((encoded_output_1_ap_ack_int_regslice == 1'b0) | (encoded_output_0_ap_ack_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state22_pp0_stage0_iter21 = ((encoded_output_1_ap_ack_int_regslice == 1'b0) | (encoded_output_0_ap_ack_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state23_io = ((encoded_output_1_ap_ack_int_regslice == 1'b0) | (encoded_output_0_ap_ack_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state23_pp0_stage0_iter22 = ((encoded_output_1_ap_ack_int_regslice == 1'b0) | (encoded_output_0_ap_ack_int_regslice == 1'b0) | (regslice_both_encoded_output_1_U_apdone_blk == 1'b1) | (regslice_both_encoded_output_0_U_apdone_blk == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign bit_sel_fu_212_p3 = add_ln91_fu_206_p2[32'd8];

assign empty_fu_752_p3 = ((tmp_11_fu_706_p3[0:0] == 1'b1) ? trunc_ln97_fu_748_p1 : or_ln80_1_fu_698_p3);

assign encoded_output_0_ap_vld = regslice_both_encoded_output_0_U_vld_out;

assign encoded_output_0_int_regslice = {{mul_ln17_fu_826_p2[25:10]}};

assign encoded_output_1_ap_vld = regslice_both_encoded_output_1_U_vld_out;

assign encoded_output_1_int_regslice = {{mul_ln19_fu_842_p2[25:10]}};

assign grp_fu_805_p1 = grp_fu_805_p10;

assign grp_fu_805_p10 = select_ln102_fu_794_p3;

assign grp_fu_858_p0 = sext_ln13_fu_180_p1;

assign grp_fu_858_p1 = sext_ln13_fu_180_p1;

assign icmp_ln102_fu_772_p2 = (($signed(s_21_fu_760_p3) > $signed(10'd0)) ? 1'b1 : 1'b0);

assign mul_ln13_1_fu_187_p0 = sext_ln13_1_fu_184_p1;

assign mul_ln13_1_fu_187_p1 = sext_ln13_1_fu_184_p1;

assign mul_ln17_fu_826_p0 = zext_ln17_fu_822_p1;

assign mul_ln17_fu_826_p1 = sext_ln13_reg_866_pp0_iter20_reg;

assign mul_ln19_fu_842_p0 = zext_ln17_fu_822_p1;

assign mul_ln19_fu_842_p1 = sext_ln13_1_reg_878_pp0_iter20_reg;

assign or_ln1_fu_358_p3 = {{q_1_2_in_in_i_reg_905}, {8'd96}};

assign or_ln80_1_fu_698_p3 = {{tmp_10_fu_688_p4}, {1'd1}};

assign or_ln91_1_fu_424_p3 = {{tmp_5_fu_392_p4}, {7'd80}};

assign or_ln91_2_fu_481_p3 = {{q_1_4_in_in_i_reg_924}, {6'd40}};

assign or_ln91_3_fu_567_p3 = {{tmp_8_fu_535_p4}, {5'd20}};

assign or_ln91_4_fu_624_p3 = {{q_1_6_in_in_i_reg_943}, {4'd10}};

assign or_ln91_5_fu_720_p3 = {{tmp_s_fu_678_p4}, {3'd5}};

assign or_ln96_1_fu_438_p3 = {{q_star_3_fu_378_p3}, {6'd48}};

assign or_ln96_2_fu_501_p3 = {{q_1_4_in_in_i_reg_924}, {6'd24}};

assign or_ln96_3_fu_581_p3 = {{q_star_6_fu_521_p3}, {4'd12}};

assign or_ln96_4_fu_644_p3 = {{q_1_6_in_in_i_reg_943}, {4'd6}};

assign or_ln96_5_fu_734_p3 = {{q_star_9_fu_664_p3}, {2'd3}};

assign or_ln_fu_338_p3 = {{q_1_2_in_in_i_reg_905}, {8'd160}};

assign q_1_2_in_in_i_fu_309_p3 = ((tmp_1_fu_264_p3[0:0] == 1'b1) ? q_star_fu_257_p3 : q_fu_250_p3);

assign q_1_4_in_in_i_fu_452_p3 = ((tmp_4_fu_410_p3[0:0] == 1'b1) ? q_star_3_fu_378_p3 : q_1_fu_402_p3);

assign q_1_6_in_in_i_fu_595_p3 = ((tmp_7_fu_553_p3[0:0] == 1'b1) ? q_star_6_fu_521_p3 : q_2_fu_545_p3);

assign q_1_fu_402_p3 = {{tmp_5_fu_392_p4}, {1'd1}};

assign q_2_fu_545_p3 = {{tmp_8_fu_535_p4}, {1'd1}};

assign q_3_fu_765_p3 = {{empty_reg_977}, {1'd1}};

assign q_fu_250_p3 = ((bit_sel_reg_888[0:0] == 1'b1) ? 2'd3 : 2'd1);

assign q_star_1_fu_351_p3 = {{q_1_2_in_in_i_reg_905}, {2'd2}};

assign q_star_2_fu_371_p3 = {{q_1_2_in_in_i_reg_905}, {2'd0}};

assign q_star_3_fu_378_p3 = ((tmp_3_reg_918[0:0] == 1'b1) ? q_star_2_fu_371_p3 : q_star_1_fu_351_p3);

assign q_star_4_fu_494_p3 = {{q_1_4_in_in_i_reg_924}, {2'd2}};

assign q_star_5_fu_514_p3 = {{q_1_4_in_in_i_reg_924}, {2'd0}};

assign q_star_6_fu_521_p3 = ((tmp_6_reg_937[0:0] == 1'b1) ? q_star_5_fu_514_p3 : q_star_4_fu_494_p3);

assign q_star_7_fu_637_p3 = {{q_1_6_in_in_i_reg_943}, {2'd2}};

assign q_star_8_fu_657_p3 = {{q_1_6_in_in_i_reg_943}, {2'd0}};

assign q_star_9_fu_664_p3 = ((tmp_9_reg_956[0:0] == 1'b1) ? q_star_8_fu_657_p3 : q_star_7_fu_637_p3);

assign q_star_fu_257_p3 = ((bit_sel_reg_888[0:0] == 1'b1) ? 2'd2 : 2'd0);

assign s_10_fu_488_p2 = (shl_ln95_3_fu_476_p2 - or_ln91_2_fu_481_p3);

assign s_11_fu_508_p2 = (or_ln96_2_fu_501_p3 + shl_ln95_3_fu_476_p2);

assign s_12_fu_528_p3 = ((tmp_6_reg_937[0:0] == 1'b1) ? s_11_fu_508_p2 : s_10_fu_488_p2);

assign s_13_fu_575_p2 = (shl_ln95_4_fu_561_p2 - or_ln91_3_fu_567_p3);

assign s_14_fu_589_p2 = (or_ln96_3_fu_581_p3 + shl_ln95_4_fu_561_p2);

assign s_15_fu_603_p3 = ((tmp_7_fu_553_p3[0:0] == 1'b1) ? s_14_fu_589_p2 : s_13_fu_575_p2);

assign s_16_fu_631_p2 = (shl_ln95_5_fu_619_p2 - or_ln91_4_fu_624_p3);

assign s_17_fu_651_p2 = (or_ln96_4_fu_644_p3 + shl_ln95_5_fu_619_p2);

assign s_18_fu_671_p3 = ((tmp_9_reg_956[0:0] == 1'b1) ? s_17_fu_651_p2 : s_16_fu_631_p2);

assign s_19_fu_728_p2 = (shl_ln91_fu_714_p2 - or_ln91_5_fu_720_p3);

assign s_1_fu_291_p2 = (shl_ln95_fu_272_p2 - add_ln91_2_fu_285_p2);

assign s_20_fu_742_p2 = (or_ln96_5_fu_734_p3 + shl_ln91_fu_714_p2);

assign s_21_fu_760_p3 = ((tmp_11_reg_962[0:0] == 1'b1) ? s_20_reg_972 : s_19_reg_967);

assign s_2_fu_303_p2 = (add_ln95_fu_297_p2 + and_ln91_1_fu_278_p3);

assign s_3_fu_317_p3 = ((tmp_1_fu_264_p3[0:0] == 1'b1) ? s_2_fu_303_p2 : s_1_fu_291_p2);

assign s_4_fu_345_p2 = (shl_ln95_1_fu_333_p2 - or_ln_fu_338_p3);

assign s_5_fu_365_p2 = (or_ln1_fu_358_p3 + shl_ln95_1_fu_333_p2);

assign s_6_fu_385_p3 = ((tmp_3_reg_918[0:0] == 1'b1) ? s_5_fu_365_p2 : s_4_fu_345_p2);

assign s_7_fu_432_p2 = (shl_ln95_2_fu_418_p2 - or_ln91_1_fu_424_p3);

assign s_8_fu_446_p2 = (or_ln96_1_fu_438_p3 + shl_ln95_2_fu_418_p2);

assign s_9_fu_460_p3 = ((tmp_4_fu_410_p3[0:0] == 1'b1) ? s_8_fu_446_p2 : s_7_fu_432_p2);

assign s_fu_244_p2 = (shl_ln_fu_236_p4 + 10'd384);

assign select_ln102_fu_794_p3 = ((icmp_ln102_fu_772_p2[0:0] == 1'b1) ? tmp_12_fu_784_p4 : empty_reg_977);

assign sext_ln13_1_fu_184_p1 = $signed(encoded_input_1_read_reg_873);

assign sext_ln13_fu_180_p1 = $signed(encoded_input_0);

assign shl_ln2_fu_814_p3 = {{trunc_ln17_fu_811_p1}, {6'd0}};

assign shl_ln91_fu_714_p2 = s_18_fu_671_p3 << 10'd1;

assign shl_ln95_1_fu_333_p2 = s_3_reg_913 << 10'd1;

assign shl_ln95_2_fu_418_p2 = s_6_fu_385_p3 << 10'd1;

assign shl_ln95_3_fu_476_p2 = s_9_reg_932 << 10'd1;

assign shl_ln95_4_fu_561_p2 = s_12_fu_528_p3 << 10'd1;

assign shl_ln95_5_fu_619_p2 = s_15_reg_951 << 10'd1;

assign shl_ln95_fu_272_p2 = s_fu_244_p2 << 10'd1;

assign shl_ln_fu_236_p4 = {{{xor_ln91_reg_894}, {tmp_2_reg_900}}, {2'd0}};

assign tmp_10_fu_688_p4 = {{q_star_9_fu_664_p3[6:1]}};

assign tmp_11_fu_706_p3 = s_18_fu_671_p3[32'd9];

assign tmp_12_fu_784_p4 = {{add_ln103_fu_778_p2[7:1]}};

assign tmp_1_fu_264_p3 = s_fu_244_p2[32'd9];

assign tmp_4_fu_410_p3 = s_6_fu_385_p3[32'd9];

assign tmp_5_fu_392_p4 = {{q_star_3_fu_378_p3[3:1]}};

assign tmp_7_fu_553_p3 = s_12_fu_528_p3[32'd9];

assign tmp_8_fu_535_p4 = {{q_star_6_fu_521_p3[5:1]}};

assign tmp_fu_193_p4 = {{grp_fu_858_p3[25:18]}};

assign tmp_s_fu_678_p4 = {{q_star_9_fu_664_p3[7:1]}};

assign trunc_ln17_fu_811_p1 = udiv_ln15_reg_988[7:0];

assign trunc_ln97_fu_748_p1 = q_star_9_fu_664_p3[6:0];

assign xor_ln91_fu_220_p2 = (bit_sel_fu_212_p3 ^ 1'd1);

assign zext_ln17_fu_822_p1 = shl_ln2_fu_814_p3;

assign zext_ln91_fu_202_p1 = tmp_fu_193_p4;

always @ (posedge ap_clk) begin
    s_3_reg_913[2:0] <= 3'b000;
    s_9_reg_932[4:0] <= 5'b10000;
    s_15_reg_951[4:0] <= 5'b11100;
    s_19_reg_967[2:0] <= 3'b111;
    s_20_reg_972[2:0] <= 3'b111;
end

endmodule //constraint_layer_top
