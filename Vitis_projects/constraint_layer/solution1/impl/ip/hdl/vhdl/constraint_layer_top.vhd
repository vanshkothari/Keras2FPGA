-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity constraint_layer_top is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    encoded_input_0_ap_vld : IN STD_LOGIC;
    encoded_input_1_ap_vld : IN STD_LOGIC;
    encoded_output_0_ap_ack : IN STD_LOGIC;
    encoded_output_1_ap_ack : IN STD_LOGIC;
    encoded_input_0 : IN STD_LOGIC_VECTOR (15 downto 0);
    encoded_input_0_ap_ack : OUT STD_LOGIC;
    encoded_input_1 : IN STD_LOGIC_VECTOR (15 downto 0);
    encoded_input_1_ap_ack : OUT STD_LOGIC;
    encoded_output_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    encoded_output_0_ap_vld : OUT STD_LOGIC;
    encoded_output_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    encoded_output_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of constraint_layer_top is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "constraint_layer_top_constraint_layer_top,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.017500,HLS_SYN_LAT=22,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=554,HLS_SYN_LUT=720,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_180 : STD_LOGIC_VECTOR (9 downto 0) := "0110000000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv10_340 : STD_LOGIC_VECTOR (9 downto 0) := "1101000000";
    constant ap_const_lv10_2C0 : STD_LOGIC_VECTOR (9 downto 0) := "1011000000";
    constant ap_const_lv8_A0 : STD_LOGIC_VECTOR (7 downto 0) := "10100000";
    constant ap_const_lv8_60 : STD_LOGIC_VECTOR (7 downto 0) := "01100000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv7_50 : STD_LOGIC_VECTOR (6 downto 0) := "1010000";
    constant ap_const_lv6_30 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_const_lv6_28 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_const_lv6_18 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv5_14 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv9_160 : STD_LOGIC_VECTOR (8 downto 0) := "101100000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state22_io : BOOLEAN;
    signal regslice_both_encoded_output_0_U_apdone_blk : STD_LOGIC;
    signal regslice_both_encoded_output_1_U_apdone_blk : STD_LOGIC;
    signal ap_block_state23_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state23_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal encoded_input_0_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal encoded_input_1_blk_n : STD_LOGIC;
    signal encoded_output_0_blk_n : STD_LOGIC;
    signal encoded_output_1_blk_n : STD_LOGIC;
    signal sext_ln13_fu_180_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866 : STD_LOGIC_VECTOR (25 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal sext_ln13_reg_866_pp0_iter1_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter2_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter3_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter4_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter5_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter6_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter7_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter8_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter9_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter10_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter11_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter12_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter13_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter14_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter15_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter16_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter17_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter18_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter19_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_reg_866_pp0_iter20_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal encoded_input_1_read_reg_873 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln13_1_fu_184_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter2_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter3_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter4_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter5_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter6_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter7_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter8_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter9_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter10_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter11_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter12_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter13_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter14_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter15_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter16_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter17_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter18_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter19_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln13_1_reg_878_pp0_iter20_reg : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln13_1_fu_187_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln13_1_reg_883 : STD_LOGIC_VECTOR (25 downto 0);
    signal bit_sel_fu_212_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal bit_sel_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln91_fu_220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln91_reg_894 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_900 : STD_LOGIC_VECTOR (6 downto 0);
    signal q_1_2_in_in_i_fu_309_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal q_1_2_in_in_i_reg_905 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_3_fu_317_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_3_reg_913 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_reg_918 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_1_4_in_in_i_fu_452_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_1_4_in_in_i_reg_924 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_9_fu_460_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_9_reg_932 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_937 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_1_6_in_in_i_fu_595_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal q_1_6_in_in_i_reg_943 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_15_fu_603_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_15_reg_951 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_956 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_706_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_reg_962 : STD_LOGIC_VECTOR (0 downto 0);
    signal s_19_fu_728_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_19_reg_967 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_20_fu_742_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_20_reg_972 : STD_LOGIC_VECTOR (9 downto 0);
    signal empty_fu_752_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal empty_reg_977 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_805_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal udiv_ln15_reg_988 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln13_1_fu_187_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln13_1_fu_187_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_858_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal tmp_fu_193_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln91_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln91_fu_206_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal shl_ln_fu_236_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_fu_244_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal and_ln91_1_fu_278_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_fu_272_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln91_2_fu_285_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln95_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_264_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_star_fu_257_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal q_fu_250_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal s_2_fu_303_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_1_fu_291_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_1_fu_333_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln_fu_338_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1_fu_358_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_2_fu_371_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal q_star_1_fu_351_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_5_fu_365_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_4_fu_345_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_3_fu_378_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_392_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal s_6_fu_385_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_2_fu_418_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln91_1_fu_424_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln96_1_fu_438_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_410_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_1_fu_402_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal s_8_fu_446_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_7_fu_432_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_3_fu_476_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln91_2_fu_481_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln96_2_fu_501_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_5_fu_514_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal q_star_4_fu_494_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_11_fu_508_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_10_fu_488_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_6_fu_521_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_535_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal s_12_fu_528_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_4_fu_561_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln91_3_fu_567_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln96_3_fu_581_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_553_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal q_2_fu_545_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_14_fu_589_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_13_fu_575_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln95_5_fu_619_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln91_4_fu_624_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln96_4_fu_644_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_8_fu_657_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal q_star_7_fu_637_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal s_17_fu_651_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal s_16_fu_631_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_star_9_fu_664_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_688_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal s_18_fu_671_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_678_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln91_fu_714_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln91_5_fu_720_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln96_5_fu_734_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln97_fu_748_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal or_ln80_1_fu_698_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal s_21_fu_760_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal q_3_fu_765_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln103_fu_778_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln102_fu_772_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_784_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln102_fu_794_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_fu_805_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal trunc_ln17_fu_811_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln2_fu_814_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln17_fu_826_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln17_fu_822_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln17_fu_826_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln17_fu_826_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln19_fu_842_p0 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln19_fu_842_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln19_fu_842_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal grp_fu_858_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_858_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_805_ce : STD_LOGIC;
    signal grp_fu_858_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to21 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal encoded_output_0_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal encoded_output_0_ap_vld_int_regslice : STD_LOGIC;
    signal encoded_output_0_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_both_encoded_output_0_U_vld_out : STD_LOGIC;
    signal encoded_output_1_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal encoded_output_1_ap_vld_int_regslice : STD_LOGIC;
    signal encoded_output_1_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_both_encoded_output_1_U_vld_out : STD_LOGIC;
    signal grp_fu_805_p10 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component constraint_layer_top_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component constraint_layer_top_udiv_9s_7ns_8_13_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component constraint_layer_top_mul_14ns_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (13 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component constraint_layer_top_mac_muladd_16s_16s_26s_26_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component constraint_layer_top_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    mul_16s_16s_26_1_1_U1 : component constraint_layer_top_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln13_1_fu_187_p0,
        din1 => mul_ln13_1_fu_187_p1,
        dout => mul_ln13_1_fu_187_p2);

    udiv_9s_7ns_8_13_1_U2 : component constraint_layer_top_udiv_9s_7ns_8_13_1
    generic map (
        ID => 1,
        NUM_STAGE => 13,
        din0_WIDTH => 9,
        din1_WIDTH => 7,
        dout_WIDTH => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv9_160,
        din1 => grp_fu_805_p1,
        ce => grp_fu_805_ce,
        dout => grp_fu_805_p2);

    mul_14ns_16s_26_1_1_U3 : component constraint_layer_top_mul_14ns_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln17_fu_826_p0,
        din1 => mul_ln17_fu_826_p1,
        dout => mul_ln17_fu_826_p2);

    mul_14ns_16s_26_1_1_U4 : component constraint_layer_top_mul_14ns_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 14,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln19_fu_842_p0,
        din1 => mul_ln19_fu_842_p1,
        dout => mul_ln19_fu_842_p2);

    mac_muladd_16s_16s_26s_26_4_1_U5 : component constraint_layer_top_mac_muladd_16s_16s_26s_26_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_858_p0,
        din1 => grp_fu_858_p1,
        din2 => mul_ln13_1_reg_883,
        ce => grp_fu_858_ce,
        dout => grp_fu_858_p3);

    regslice_both_encoded_output_0_U : component constraint_layer_top_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => encoded_output_0_int_regslice,
        vld_in => encoded_output_0_ap_vld_int_regslice,
        ack_in => encoded_output_0_ap_ack_int_regslice,
        data_out => encoded_output_0,
        vld_out => regslice_both_encoded_output_0_U_vld_out,
        ack_out => encoded_output_0_ap_ack,
        apdone_blk => regslice_both_encoded_output_0_U_apdone_blk);

    regslice_both_encoded_output_1_U : component constraint_layer_top_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => encoded_output_1_int_regslice,
        vld_in => encoded_output_1_ap_vld_int_regslice,
        ack_in => encoded_output_1_ap_ack_int_regslice,
        data_out => encoded_output_1,
        vld_out => regslice_both_encoded_output_1_U_vld_out,
        ack_out => encoded_output_1_ap_ack,
        apdone_blk => regslice_both_encoded_output_1_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                bit_sel_reg_888 <= add_ln91_fu_206_p2(8 downto 8);
                empty_reg_977 <= empty_fu_752_p3;
                q_1_2_in_in_i_reg_905 <= q_1_2_in_in_i_fu_309_p3;
                q_1_4_in_in_i_reg_924 <= q_1_4_in_in_i_fu_452_p3;
                q_1_6_in_in_i_reg_943 <= q_1_6_in_in_i_fu_595_p3;
                    s_15_reg_951(9 downto 5) <= s_15_fu_603_p3(9 downto 5);
                    s_19_reg_967(9 downto 3) <= s_19_fu_728_p2(9 downto 3);
                    s_20_reg_972(9 downto 3) <= s_20_fu_742_p2(9 downto 3);
                    s_3_reg_913(9 downto 3) <= s_3_fu_317_p3(9 downto 3);
                    s_9_reg_932(9 downto 5) <= s_9_fu_460_p3(9 downto 5);
                sext_ln13_1_reg_878_pp0_iter10_reg <= sext_ln13_1_reg_878_pp0_iter9_reg;
                sext_ln13_1_reg_878_pp0_iter11_reg <= sext_ln13_1_reg_878_pp0_iter10_reg;
                sext_ln13_1_reg_878_pp0_iter12_reg <= sext_ln13_1_reg_878_pp0_iter11_reg;
                sext_ln13_1_reg_878_pp0_iter13_reg <= sext_ln13_1_reg_878_pp0_iter12_reg;
                sext_ln13_1_reg_878_pp0_iter14_reg <= sext_ln13_1_reg_878_pp0_iter13_reg;
                sext_ln13_1_reg_878_pp0_iter15_reg <= sext_ln13_1_reg_878_pp0_iter14_reg;
                sext_ln13_1_reg_878_pp0_iter16_reg <= sext_ln13_1_reg_878_pp0_iter15_reg;
                sext_ln13_1_reg_878_pp0_iter17_reg <= sext_ln13_1_reg_878_pp0_iter16_reg;
                sext_ln13_1_reg_878_pp0_iter18_reg <= sext_ln13_1_reg_878_pp0_iter17_reg;
                sext_ln13_1_reg_878_pp0_iter19_reg <= sext_ln13_1_reg_878_pp0_iter18_reg;
                sext_ln13_1_reg_878_pp0_iter20_reg <= sext_ln13_1_reg_878_pp0_iter19_reg;
                sext_ln13_1_reg_878_pp0_iter2_reg <= sext_ln13_1_reg_878;
                sext_ln13_1_reg_878_pp0_iter3_reg <= sext_ln13_1_reg_878_pp0_iter2_reg;
                sext_ln13_1_reg_878_pp0_iter4_reg <= sext_ln13_1_reg_878_pp0_iter3_reg;
                sext_ln13_1_reg_878_pp0_iter5_reg <= sext_ln13_1_reg_878_pp0_iter4_reg;
                sext_ln13_1_reg_878_pp0_iter6_reg <= sext_ln13_1_reg_878_pp0_iter5_reg;
                sext_ln13_1_reg_878_pp0_iter7_reg <= sext_ln13_1_reg_878_pp0_iter6_reg;
                sext_ln13_1_reg_878_pp0_iter8_reg <= sext_ln13_1_reg_878_pp0_iter7_reg;
                sext_ln13_1_reg_878_pp0_iter9_reg <= sext_ln13_1_reg_878_pp0_iter8_reg;
                sext_ln13_reg_866_pp0_iter10_reg <= sext_ln13_reg_866_pp0_iter9_reg;
                sext_ln13_reg_866_pp0_iter11_reg <= sext_ln13_reg_866_pp0_iter10_reg;
                sext_ln13_reg_866_pp0_iter12_reg <= sext_ln13_reg_866_pp0_iter11_reg;
                sext_ln13_reg_866_pp0_iter13_reg <= sext_ln13_reg_866_pp0_iter12_reg;
                sext_ln13_reg_866_pp0_iter14_reg <= sext_ln13_reg_866_pp0_iter13_reg;
                sext_ln13_reg_866_pp0_iter15_reg <= sext_ln13_reg_866_pp0_iter14_reg;
                sext_ln13_reg_866_pp0_iter16_reg <= sext_ln13_reg_866_pp0_iter15_reg;
                sext_ln13_reg_866_pp0_iter17_reg <= sext_ln13_reg_866_pp0_iter16_reg;
                sext_ln13_reg_866_pp0_iter18_reg <= sext_ln13_reg_866_pp0_iter17_reg;
                sext_ln13_reg_866_pp0_iter19_reg <= sext_ln13_reg_866_pp0_iter18_reg;
                sext_ln13_reg_866_pp0_iter20_reg <= sext_ln13_reg_866_pp0_iter19_reg;
                sext_ln13_reg_866_pp0_iter2_reg <= sext_ln13_reg_866_pp0_iter1_reg;
                sext_ln13_reg_866_pp0_iter3_reg <= sext_ln13_reg_866_pp0_iter2_reg;
                sext_ln13_reg_866_pp0_iter4_reg <= sext_ln13_reg_866_pp0_iter3_reg;
                sext_ln13_reg_866_pp0_iter5_reg <= sext_ln13_reg_866_pp0_iter4_reg;
                sext_ln13_reg_866_pp0_iter6_reg <= sext_ln13_reg_866_pp0_iter5_reg;
                sext_ln13_reg_866_pp0_iter7_reg <= sext_ln13_reg_866_pp0_iter6_reg;
                sext_ln13_reg_866_pp0_iter8_reg <= sext_ln13_reg_866_pp0_iter7_reg;
                sext_ln13_reg_866_pp0_iter9_reg <= sext_ln13_reg_866_pp0_iter8_reg;
                tmp_11_reg_962 <= s_18_fu_671_p3(9 downto 9);
                tmp_2_reg_900 <= add_ln91_fu_206_p2(7 downto 1);
                tmp_3_reg_918 <= s_3_fu_317_p3(9 downto 9);
                tmp_6_reg_937 <= s_9_fu_460_p3(9 downto 9);
                tmp_9_reg_956 <= s_15_fu_603_p3(9 downto 9);
                udiv_ln15_reg_988 <= grp_fu_805_p2;
                xor_ln91_reg_894 <= xor_ln91_fu_220_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                encoded_input_1_read_reg_873 <= encoded_input_1;
                mul_ln13_1_reg_883 <= mul_ln13_1_fu_187_p2;
                sext_ln13_1_reg_878 <= sext_ln13_1_fu_184_p1;
                sext_ln13_reg_866 <= sext_ln13_fu_180_p1;
                sext_ln13_reg_866_pp0_iter1_reg <= sext_ln13_reg_866;
            end if;
        end if;
    end process;
    s_3_reg_913(2 downto 0) <= "000";
    s_9_reg_932(4 downto 0) <= "10000";
    s_15_reg_951(4 downto 0) <= "11100";
    s_19_reg_967(2 downto 0) <= "111";
    s_20_reg_972(2 downto 0) <= "111";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln103_fu_778_p2 <= std_logic_vector(unsigned(q_3_fu_765_p3) + unsigned(ap_const_lv8_1));
    add_ln91_2_fu_285_p2 <= std_logic_vector(unsigned(and_ln91_1_fu_278_p3) + unsigned(ap_const_lv10_340));
    add_ln91_fu_206_p2 <= std_logic_vector(unsigned(zext_ln91_fu_202_p1) + unsigned(ap_const_lv9_1));
    add_ln95_fu_297_p2 <= std_logic_vector(unsigned(shl_ln95_fu_272_p2) + unsigned(ap_const_lv10_2C0));
    and_ln91_1_fu_278_p3 <= (xor_ln91_reg_894 & ap_const_lv9_0);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_block_state1_pp0_stage0_iter0, ap_block_state22_pp0_stage0_iter21, ap_block_state23_pp0_stage0_iter22)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_pp0_stage0_iter22)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_pp0_stage0_iter21)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_block_state1_pp0_stage0_iter0, ap_block_state22_pp0_stage0_iter21, ap_block_state22_io, ap_block_state23_pp0_stage0_iter22, ap_block_state23_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state23_io) or (ap_const_boolean_1 = ap_block_state23_pp0_stage0_iter22))) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (ap_const_boolean_1 = ap_block_state22_pp0_stage0_iter21))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_block_state1_pp0_stage0_iter0, ap_block_state22_pp0_stage0_iter21, ap_block_state22_io, ap_block_state23_pp0_stage0_iter22, ap_block_state23_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_start = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0)) or ((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state23_io) or (ap_const_boolean_1 = ap_block_state23_pp0_stage0_iter22))) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state22_io) or (ap_const_boolean_1 = ap_block_state22_pp0_stage0_iter21))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(encoded_input_0_ap_vld, encoded_input_1_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((encoded_input_1_ap_vld = ap_const_logic_0) or (encoded_input_0_ap_vld = ap_const_logic_0));
    end process;


    ap_block_state22_io_assign_proc : process(encoded_output_0_ap_ack_int_regslice, encoded_output_1_ap_ack_int_regslice)
    begin
                ap_block_state22_io <= ((encoded_output_1_ap_ack_int_regslice = ap_const_logic_0) or (encoded_output_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state22_pp0_stage0_iter21_assign_proc : process(encoded_output_0_ap_ack_int_regslice, encoded_output_1_ap_ack_int_regslice)
    begin
                ap_block_state22_pp0_stage0_iter21 <= ((encoded_output_1_ap_ack_int_regslice = ap_const_logic_0) or (encoded_output_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state23_io_assign_proc : process(encoded_output_0_ap_ack_int_regslice, encoded_output_1_ap_ack_int_regslice)
    begin
                ap_block_state23_io <= ((encoded_output_1_ap_ack_int_regslice = ap_const_logic_0) or (encoded_output_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state23_pp0_stage0_iter22_assign_proc : process(regslice_both_encoded_output_0_U_apdone_blk, regslice_both_encoded_output_1_U_apdone_blk, encoded_output_0_ap_ack_int_regslice, encoded_output_1_ap_ack_int_regslice)
    begin
                ap_block_state23_pp0_stage0_iter22 <= ((encoded_output_1_ap_ack_int_regslice = ap_const_logic_0) or (encoded_output_0_ap_ack_int_regslice = ap_const_logic_0) or (regslice_both_encoded_output_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_encoded_output_0_U_apdone_blk = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter22, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22)
    begin
        if (((ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to21_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) 
    and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to21 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to21 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to21)
    begin
        if (((ap_idle_pp0_0to21 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    bit_sel_fu_212_p3 <= add_ln91_fu_206_p2(8 downto 8);
    empty_fu_752_p3 <= 
        trunc_ln97_fu_748_p1 when (tmp_11_fu_706_p3(0) = '1') else 
        or_ln80_1_fu_698_p3;

    encoded_input_0_ap_ack_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            encoded_input_0_ap_ack <= ap_const_logic_1;
        else 
            encoded_input_0_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    encoded_input_0_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, encoded_input_0_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            encoded_input_0_blk_n <= encoded_input_0_ap_vld;
        else 
            encoded_input_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    encoded_input_1_ap_ack_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            encoded_input_1_ap_ack <= ap_const_logic_1;
        else 
            encoded_input_1_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    encoded_input_1_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, encoded_input_1_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            encoded_input_1_blk_n <= encoded_input_1_ap_vld;
        else 
            encoded_input_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encoded_output_0_ap_vld <= regslice_both_encoded_output_0_U_vld_out;

    encoded_output_0_ap_vld_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            encoded_output_0_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            encoded_output_0_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    encoded_output_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_block_pp0_stage0, encoded_output_0_ap_ack_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            encoded_output_0_blk_n <= encoded_output_0_ap_ack_int_regslice;
        else 
            encoded_output_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encoded_output_0_int_regslice <= mul_ln17_fu_826_p2(25 downto 10);
    encoded_output_1_ap_vld <= regslice_both_encoded_output_1_U_vld_out;

    encoded_output_1_ap_vld_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter21, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            encoded_output_1_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            encoded_output_1_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    encoded_output_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_block_pp0_stage0, encoded_output_1_ap_ack_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter22 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_enable_reg_pp0_iter21 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            encoded_output_1_blk_n <= encoded_output_1_ap_ack_int_regslice;
        else 
            encoded_output_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    encoded_output_1_int_regslice <= mul_ln19_fu_842_p2(25 downto 10);

    grp_fu_805_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_805_ce <= ap_const_logic_1;
        else 
            grp_fu_805_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_805_p1 <= grp_fu_805_p10(7 - 1 downto 0);
    grp_fu_805_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln102_fu_794_p3),9));

    grp_fu_858_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            grp_fu_858_ce <= ap_const_logic_1;
        else 
            grp_fu_858_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_858_p0 <= sext_ln13_fu_180_p1(16 - 1 downto 0);
    grp_fu_858_p1 <= sext_ln13_fu_180_p1(16 - 1 downto 0);
    icmp_ln102_fu_772_p2 <= "1" when (signed(s_21_fu_760_p3) > signed(ap_const_lv10_0)) else "0";
    mul_ln13_1_fu_187_p0 <= sext_ln13_1_fu_184_p1(16 - 1 downto 0);
    mul_ln13_1_fu_187_p1 <= sext_ln13_1_fu_184_p1(16 - 1 downto 0);
    mul_ln17_fu_826_p0 <= zext_ln17_fu_822_p1(14 - 1 downto 0);
    mul_ln17_fu_826_p1 <= sext_ln13_reg_866_pp0_iter20_reg(16 - 1 downto 0);
    mul_ln19_fu_842_p0 <= zext_ln17_fu_822_p1(14 - 1 downto 0);
    mul_ln19_fu_842_p1 <= sext_ln13_1_reg_878_pp0_iter20_reg(16 - 1 downto 0);
    or_ln1_fu_358_p3 <= (q_1_2_in_in_i_reg_905 & ap_const_lv8_60);
    or_ln80_1_fu_698_p3 <= (tmp_10_fu_688_p4 & ap_const_lv1_1);
    or_ln91_1_fu_424_p3 <= (tmp_5_fu_392_p4 & ap_const_lv7_50);
    or_ln91_2_fu_481_p3 <= (q_1_4_in_in_i_reg_924 & ap_const_lv6_28);
    or_ln91_3_fu_567_p3 <= (tmp_8_fu_535_p4 & ap_const_lv5_14);
    or_ln91_4_fu_624_p3 <= (q_1_6_in_in_i_reg_943 & ap_const_lv4_A);
    or_ln91_5_fu_720_p3 <= (tmp_s_fu_678_p4 & ap_const_lv3_5);
    or_ln96_1_fu_438_p3 <= (q_star_3_fu_378_p3 & ap_const_lv6_30);
    or_ln96_2_fu_501_p3 <= (q_1_4_in_in_i_reg_924 & ap_const_lv6_18);
    or_ln96_3_fu_581_p3 <= (q_star_6_fu_521_p3 & ap_const_lv4_C);
    or_ln96_4_fu_644_p3 <= (q_1_6_in_in_i_reg_943 & ap_const_lv4_6);
    or_ln96_5_fu_734_p3 <= (q_star_9_fu_664_p3 & ap_const_lv2_3);
    or_ln_fu_338_p3 <= (q_1_2_in_in_i_reg_905 & ap_const_lv8_A0);
    q_1_2_in_in_i_fu_309_p3 <= 
        q_star_fu_257_p3 when (tmp_1_fu_264_p3(0) = '1') else 
        q_fu_250_p3;
    q_1_4_in_in_i_fu_452_p3 <= 
        q_star_3_fu_378_p3 when (tmp_4_fu_410_p3(0) = '1') else 
        q_1_fu_402_p3;
    q_1_6_in_in_i_fu_595_p3 <= 
        q_star_6_fu_521_p3 when (tmp_7_fu_553_p3(0) = '1') else 
        q_2_fu_545_p3;
    q_1_fu_402_p3 <= (tmp_5_fu_392_p4 & ap_const_lv1_1);
    q_2_fu_545_p3 <= (tmp_8_fu_535_p4 & ap_const_lv1_1);
    q_3_fu_765_p3 <= (empty_reg_977 & ap_const_lv1_1);
    q_fu_250_p3 <= 
        ap_const_lv2_3 when (bit_sel_reg_888(0) = '1') else 
        ap_const_lv2_1;
    q_star_1_fu_351_p3 <= (q_1_2_in_in_i_reg_905 & ap_const_lv2_2);
    q_star_2_fu_371_p3 <= (q_1_2_in_in_i_reg_905 & ap_const_lv2_0);
    q_star_3_fu_378_p3 <= 
        q_star_2_fu_371_p3 when (tmp_3_reg_918(0) = '1') else 
        q_star_1_fu_351_p3;
    q_star_4_fu_494_p3 <= (q_1_4_in_in_i_reg_924 & ap_const_lv2_2);
    q_star_5_fu_514_p3 <= (q_1_4_in_in_i_reg_924 & ap_const_lv2_0);
    q_star_6_fu_521_p3 <= 
        q_star_5_fu_514_p3 when (tmp_6_reg_937(0) = '1') else 
        q_star_4_fu_494_p3;
    q_star_7_fu_637_p3 <= (q_1_6_in_in_i_reg_943 & ap_const_lv2_2);
    q_star_8_fu_657_p3 <= (q_1_6_in_in_i_reg_943 & ap_const_lv2_0);
    q_star_9_fu_664_p3 <= 
        q_star_8_fu_657_p3 when (tmp_9_reg_956(0) = '1') else 
        q_star_7_fu_637_p3;
    q_star_fu_257_p3 <= 
        ap_const_lv2_2 when (bit_sel_reg_888(0) = '1') else 
        ap_const_lv2_0;
    s_10_fu_488_p2 <= std_logic_vector(unsigned(shl_ln95_3_fu_476_p2) - unsigned(or_ln91_2_fu_481_p3));
    s_11_fu_508_p2 <= std_logic_vector(unsigned(or_ln96_2_fu_501_p3) + unsigned(shl_ln95_3_fu_476_p2));
    s_12_fu_528_p3 <= 
        s_11_fu_508_p2 when (tmp_6_reg_937(0) = '1') else 
        s_10_fu_488_p2;
    s_13_fu_575_p2 <= std_logic_vector(unsigned(shl_ln95_4_fu_561_p2) - unsigned(or_ln91_3_fu_567_p3));
    s_14_fu_589_p2 <= std_logic_vector(unsigned(or_ln96_3_fu_581_p3) + unsigned(shl_ln95_4_fu_561_p2));
    s_15_fu_603_p3 <= 
        s_14_fu_589_p2 when (tmp_7_fu_553_p3(0) = '1') else 
        s_13_fu_575_p2;
    s_16_fu_631_p2 <= std_logic_vector(unsigned(shl_ln95_5_fu_619_p2) - unsigned(or_ln91_4_fu_624_p3));
    s_17_fu_651_p2 <= std_logic_vector(unsigned(or_ln96_4_fu_644_p3) + unsigned(shl_ln95_5_fu_619_p2));
    s_18_fu_671_p3 <= 
        s_17_fu_651_p2 when (tmp_9_reg_956(0) = '1') else 
        s_16_fu_631_p2;
    s_19_fu_728_p2 <= std_logic_vector(unsigned(shl_ln91_fu_714_p2) - unsigned(or_ln91_5_fu_720_p3));
    s_1_fu_291_p2 <= std_logic_vector(unsigned(shl_ln95_fu_272_p2) - unsigned(add_ln91_2_fu_285_p2));
    s_20_fu_742_p2 <= std_logic_vector(unsigned(or_ln96_5_fu_734_p3) + unsigned(shl_ln91_fu_714_p2));
    s_21_fu_760_p3 <= 
        s_20_reg_972 when (tmp_11_reg_962(0) = '1') else 
        s_19_reg_967;
    s_2_fu_303_p2 <= std_logic_vector(unsigned(add_ln95_fu_297_p2) + unsigned(and_ln91_1_fu_278_p3));
    s_3_fu_317_p3 <= 
        s_2_fu_303_p2 when (tmp_1_fu_264_p3(0) = '1') else 
        s_1_fu_291_p2;
    s_4_fu_345_p2 <= std_logic_vector(unsigned(shl_ln95_1_fu_333_p2) - unsigned(or_ln_fu_338_p3));
    s_5_fu_365_p2 <= std_logic_vector(unsigned(or_ln1_fu_358_p3) + unsigned(shl_ln95_1_fu_333_p2));
    s_6_fu_385_p3 <= 
        s_5_fu_365_p2 when (tmp_3_reg_918(0) = '1') else 
        s_4_fu_345_p2;
    s_7_fu_432_p2 <= std_logic_vector(unsigned(shl_ln95_2_fu_418_p2) - unsigned(or_ln91_1_fu_424_p3));
    s_8_fu_446_p2 <= std_logic_vector(unsigned(or_ln96_1_fu_438_p3) + unsigned(shl_ln95_2_fu_418_p2));
    s_9_fu_460_p3 <= 
        s_8_fu_446_p2 when (tmp_4_fu_410_p3(0) = '1') else 
        s_7_fu_432_p2;
    s_fu_244_p2 <= std_logic_vector(unsigned(shl_ln_fu_236_p4) + unsigned(ap_const_lv10_180));
    select_ln102_fu_794_p3 <= 
        tmp_12_fu_784_p4 when (icmp_ln102_fu_772_p2(0) = '1') else 
        empty_reg_977;
        sext_ln13_1_fu_184_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(encoded_input_1_read_reg_873),26));

        sext_ln13_fu_180_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(encoded_input_0),26));

    shl_ln2_fu_814_p3 <= (trunc_ln17_fu_811_p1 & ap_const_lv6_0);
    shl_ln91_fu_714_p2 <= std_logic_vector(shift_left(unsigned(s_18_fu_671_p3),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_1_fu_333_p2 <= std_logic_vector(shift_left(unsigned(s_3_reg_913),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_2_fu_418_p2 <= std_logic_vector(shift_left(unsigned(s_6_fu_385_p3),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_3_fu_476_p2 <= std_logic_vector(shift_left(unsigned(s_9_reg_932),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_4_fu_561_p2 <= std_logic_vector(shift_left(unsigned(s_12_fu_528_p3),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_5_fu_619_p2 <= std_logic_vector(shift_left(unsigned(s_15_reg_951),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln95_fu_272_p2 <= std_logic_vector(shift_left(unsigned(s_fu_244_p2),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));
    shl_ln_fu_236_p4 <= ((xor_ln91_reg_894 & tmp_2_reg_900) & ap_const_lv2_0);
    tmp_10_fu_688_p4 <= q_star_9_fu_664_p3(6 downto 1);
    tmp_11_fu_706_p3 <= s_18_fu_671_p3(9 downto 9);
    tmp_12_fu_784_p4 <= add_ln103_fu_778_p2(7 downto 1);
    tmp_1_fu_264_p3 <= s_fu_244_p2(9 downto 9);
    tmp_4_fu_410_p3 <= s_6_fu_385_p3(9 downto 9);
    tmp_5_fu_392_p4 <= q_star_3_fu_378_p3(3 downto 1);
    tmp_7_fu_553_p3 <= s_12_fu_528_p3(9 downto 9);
    tmp_8_fu_535_p4 <= q_star_6_fu_521_p3(5 downto 1);
    tmp_fu_193_p4 <= grp_fu_858_p3(25 downto 18);
    tmp_s_fu_678_p4 <= q_star_9_fu_664_p3(7 downto 1);
    trunc_ln17_fu_811_p1 <= udiv_ln15_reg_988(8 - 1 downto 0);
    trunc_ln97_fu_748_p1 <= q_star_9_fu_664_p3(7 - 1 downto 0);
    xor_ln91_fu_220_p2 <= (bit_sel_fu_212_p3 xor ap_const_lv1_1);
    zext_ln17_fu_822_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_814_p3),26));
    zext_ln91_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_193_p4),9));
end behav;
