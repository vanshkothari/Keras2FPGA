-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decoder_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    x_0_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_1_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_2_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_3_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_4_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_5_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_6_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_7_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_8_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_9_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_10_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_11_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_12_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_13_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_14_val : IN STD_LOGIC_VECTOR (16 downto 0);
    x_15_val : IN STD_LOGIC_VECTOR (16 downto 0);
    idx : IN STD_LOGIC_VECTOR (3 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (17 downto 0) );
end;


architecture behav of decoder_reduce_ap_fixed_18_8_0_0_0_4_Op_add_ap_fixed_18_8_0_0_0_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv18_1FFFF : STD_LOGIC_VECTOR (17 downto 0) := "011111111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv18_20000 : STD_LOGIC_VECTOR (17 downto 0) := "100000000000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal select_ln50_fu_296_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_reg_528 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln50_6_fu_422_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_6_reg_534 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_fu_178_p21 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_fu_178_p23 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_230_p21 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_s_fu_230_p23 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_fu_278_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_fu_226_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_fu_282_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_53_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_54_fu_304_p21 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_54_fu_304_p23 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_356_p21 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_55_fu_356_p23 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln50_1_fu_404_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal zext_ln43_1_fu_352_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln50_6_fu_408_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_56_fu_414_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln50_6_fu_433_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln50_fu_430_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_8_fu_440_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln50_7_fu_436_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_57_fu_446_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_58_fu_454_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_6_fu_474_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_7_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_fu_468_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln50_8_fu_492_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln50_3_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln50_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln50_7_fu_504_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln50_8_fu_512_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal tmp_fu_178_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_fu_178_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_230_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_304_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_55_fu_356_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component decoder_sparsemux_21_4_17_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (16 downto 0);
        din1 : IN STD_LOGIC_VECTOR (16 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        din3 : IN STD_LOGIC_VECTOR (16 downto 0);
        din4 : IN STD_LOGIC_VECTOR (16 downto 0);
        din5 : IN STD_LOGIC_VECTOR (16 downto 0);
        din6 : IN STD_LOGIC_VECTOR (16 downto 0);
        din7 : IN STD_LOGIC_VECTOR (16 downto 0);
        din8 : IN STD_LOGIC_VECTOR (16 downto 0);
        din9 : IN STD_LOGIC_VECTOR (16 downto 0);
        def : IN STD_LOGIC_VECTOR (16 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;



begin
    sparsemux_21_4_17_1_1_U74 : component decoder_sparsemux_21_4_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 17,
        CASE1 => "0001",
        din1_WIDTH => 17,
        CASE2 => "0010",
        din2_WIDTH => 17,
        CASE3 => "0011",
        din3_WIDTH => 17,
        CASE4 => "0100",
        din4_WIDTH => 17,
        CASE5 => "1000",
        din5_WIDTH => 17,
        CASE6 => "1001",
        din6_WIDTH => 17,
        CASE7 => "1010",
        din7_WIDTH => 17,
        CASE8 => "1011",
        din8_WIDTH => 17,
        CASE9 => "1100",
        din9_WIDTH => 17,
        def_WIDTH => 17,
        sel_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        din0 => x_0_val,
        din1 => x_1_val,
        din2 => x_2_val,
        din3 => x_3_val,
        din4 => x_4_val,
        din5 => x_8_val,
        din6 => x_9_val,
        din7 => x_10_val,
        din8 => x_11_val,
        din9 => x_12_val,
        def => tmp_fu_178_p21,
        sel => idx,
        dout => tmp_fu_178_p23);

    sparsemux_21_4_17_1_1_U75 : component decoder_sparsemux_21_4_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 17,
        CASE1 => "0001",
        din1_WIDTH => 17,
        CASE2 => "0010",
        din2_WIDTH => 17,
        CASE3 => "0011",
        din3_WIDTH => 17,
        CASE4 => "0100",
        din4_WIDTH => 17,
        CASE5 => "1000",
        din5_WIDTH => 17,
        CASE6 => "1001",
        din6_WIDTH => 17,
        CASE7 => "1010",
        din7_WIDTH => 17,
        CASE8 => "1011",
        din8_WIDTH => 17,
        CASE9 => "1100",
        din9_WIDTH => 17,
        def_WIDTH => 17,
        sel_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        din0 => x_1_val,
        din1 => x_2_val,
        din2 => x_3_val,
        din3 => x_4_val,
        din4 => x_5_val,
        din5 => x_9_val,
        din6 => x_10_val,
        din7 => x_11_val,
        din8 => x_12_val,
        din9 => x_13_val,
        def => tmp_s_fu_230_p21,
        sel => idx,
        dout => tmp_s_fu_230_p23);

    sparsemux_21_4_17_1_1_U76 : component decoder_sparsemux_21_4_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 17,
        CASE1 => "0001",
        din1_WIDTH => 17,
        CASE2 => "0010",
        din2_WIDTH => 17,
        CASE3 => "0011",
        din3_WIDTH => 17,
        CASE4 => "0100",
        din4_WIDTH => 17,
        CASE5 => "1000",
        din5_WIDTH => 17,
        CASE6 => "1001",
        din6_WIDTH => 17,
        CASE7 => "1010",
        din7_WIDTH => 17,
        CASE8 => "1011",
        din8_WIDTH => 17,
        CASE9 => "1100",
        din9_WIDTH => 17,
        def_WIDTH => 17,
        sel_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        din0 => x_2_val,
        din1 => x_3_val,
        din2 => x_4_val,
        din3 => x_5_val,
        din4 => x_6_val,
        din5 => x_10_val,
        din6 => x_11_val,
        din7 => x_12_val,
        din8 => x_13_val,
        din9 => x_14_val,
        def => tmp_54_fu_304_p21,
        sel => idx,
        dout => tmp_54_fu_304_p23);

    sparsemux_21_4_17_1_1_U77 : component decoder_sparsemux_21_4_17_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 17,
        CASE1 => "0001",
        din1_WIDTH => 17,
        CASE2 => "0010",
        din2_WIDTH => 17,
        CASE3 => "0011",
        din3_WIDTH => 17,
        CASE4 => "0100",
        din4_WIDTH => 17,
        CASE5 => "1000",
        din5_WIDTH => 17,
        CASE6 => "1001",
        din6_WIDTH => 17,
        CASE7 => "1010",
        din7_WIDTH => 17,
        CASE8 => "1011",
        din8_WIDTH => 17,
        CASE9 => "1100",
        din9_WIDTH => 17,
        def_WIDTH => 17,
        sel_WIDTH => 4,
        dout_WIDTH => 17)
    port map (
        din0 => x_3_val,
        din1 => x_4_val,
        din2 => x_5_val,
        din3 => x_6_val,
        din4 => x_7_val,
        din5 => x_11_val,
        din6 => x_12_val,
        din7 => x_13_val,
        din8 => x_14_val,
        din9 => x_15_val,
        def => tmp_55_fu_356_p21,
        sel => idx,
        dout => tmp_55_fu_356_p23);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_ce) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln50_6_reg_534 <= select_ln50_6_fu_422_p3;
                select_ln50_reg_528 <= select_ln50_fu_296_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln50_6_fu_408_p2 <= std_logic_vector(unsigned(zext_ln50_1_fu_404_p1) + unsigned(zext_ln43_1_fu_352_p1));
    add_ln50_7_fu_436_p2 <= std_logic_vector(signed(select_ln50_6_reg_534) + signed(select_ln50_reg_528));
    add_ln50_8_fu_440_p2 <= std_logic_vector(signed(sext_ln50_6_fu_433_p1) + signed(sext_ln50_fu_430_p1));
    add_ln50_fu_282_p2 <= std_logic_vector(unsigned(zext_ln50_fu_278_p1) + unsigned(zext_ln43_fu_226_p1));
    and_ln50_3_fu_480_p2 <= (xor_ln50_6_fu_474_p2 and tmp_57_fu_446_p3);
    and_ln50_fu_468_p2 <= (xor_ln50_fu_462_p2 and tmp_58_fu_454_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= (ap_const_logic_0 = ap_ce);
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to0 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln50_7_fu_504_p3 when (or_ln50_fu_498_p2(0) = '1') else 
        select_ln50_8_fu_512_p3;
    or_ln50_fu_498_p2 <= (xor_ln50_8_fu_492_p2 or and_ln50_fu_468_p2);
    select_ln50_6_fu_422_p3 <= 
        ap_const_lv18_1FFFF when (tmp_56_fu_414_p3(0) = '1') else 
        add_ln50_6_fu_408_p2;
    select_ln50_7_fu_504_p3 <= 
        ap_const_lv18_1FFFF when (xor_ln50_7_fu_486_p2(0) = '1') else 
        add_ln50_7_fu_436_p2;
    select_ln50_8_fu_512_p3 <= 
        ap_const_lv18_20000 when (and_ln50_3_fu_480_p2(0) = '1') else 
        add_ln50_7_fu_436_p2;
    select_ln50_fu_296_p3 <= 
        ap_const_lv18_1FFFF when (tmp_53_fu_288_p3(0) = '1') else 
        add_ln50_fu_282_p2;
        sext_ln50_6_fu_433_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_6_reg_534),19));

        sext_ln50_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln50_reg_528),19));

    tmp_53_fu_288_p3 <= add_ln50_fu_282_p2(17 downto 17);
    tmp_54_fu_304_p21 <= "XXXXXXXXXXXXXXXXX";
    tmp_55_fu_356_p21 <= "XXXXXXXXXXXXXXXXX";
    tmp_56_fu_414_p3 <= add_ln50_6_fu_408_p2(17 downto 17);
    tmp_57_fu_446_p3 <= add_ln50_8_fu_440_p2(18 downto 18);
    tmp_58_fu_454_p3 <= add_ln50_7_fu_436_p2(17 downto 17);
    tmp_fu_178_p21 <= "XXXXXXXXXXXXXXXXX";
    tmp_s_fu_230_p21 <= "XXXXXXXXXXXXXXXXX";
    xor_ln50_6_fu_474_p2 <= (tmp_58_fu_454_p3 xor ap_const_lv1_1);
    xor_ln50_7_fu_486_p2 <= (tmp_58_fu_454_p3 xor tmp_57_fu_446_p3);
    xor_ln50_8_fu_492_p2 <= (xor_ln50_7_fu_486_p2 xor ap_const_lv1_1);
    xor_ln50_fu_462_p2 <= (tmp_57_fu_446_p3 xor ap_const_lv1_1);
    zext_ln43_1_fu_352_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_54_fu_304_p23),18));
    zext_ln43_fu_226_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_178_p23),18));
    zext_ln50_1_fu_404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_356_p23),18));
    zext_ln50_fu_278_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_230_p23),18));
end behav;
