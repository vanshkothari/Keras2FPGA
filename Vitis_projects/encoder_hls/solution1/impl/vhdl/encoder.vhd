-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity encoder is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_112 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_112_ap_vld : IN STD_LOGIC;
    input_112_ap_ack : OUT STD_LOGIC;
    layer4_out_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_0_ap_vld : OUT STD_LOGIC;
    layer4_out_0_ap_ack : IN STD_LOGIC;
    layer4_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer4_out_1_ap_vld : OUT STD_LOGIC;
    layer4_out_1_ap_ack : IN STD_LOGIC );
end;


architecture behav of encoder is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "encoder_encoder,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a35t-cpg236-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=7.156250,HLS_SYN_LAT=13,HLS_SYN_TPT=8,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1502,HLS_SYN_LUT=6847,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal input_112_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer4_out_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal layer4_out_1_blk_n : STD_LOGIC;
    signal layer2_out_reg_238 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal layer2_out_1_reg_243 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_2_reg_248 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_3_reg_253 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_4_reg_258 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_5_reg_263 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_6_reg_268 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_7_reg_273 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_8_reg_278 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_9_reg_283 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_10_reg_288 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_11_reg_293 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_12_reg_298 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_13_reg_303 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_14_reg_308 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_15_reg_313 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_reg_318 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal layer3_out_1_reg_323 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_2_reg_328 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_3_reg_333 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_4_reg_338 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_5_reg_343 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_6_reg_348 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_7_reg_353 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_8_reg_358 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_9_reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_10_reg_368 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_11_reg_373 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_12_reg_378 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_13_reg_383 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_14_reg_388 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer3_out_15_reg_393 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state13_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal regslice_both_layer4_out_0_U_apdone_blk : STD_LOGIC;
    signal regslice_both_layer4_out_1_U_apdone_blk : STD_LOGIC;
    signal ap_block_state14_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state14_io : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start : STD_LOGIC;
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_done : STD_LOGIC;
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_idle : STD_LOGIC;
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ready : STD_LOGIC;
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ce : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call9 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp16 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp17 : BOOLEAN;
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_ready : STD_LOGIC;
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_2 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_3 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_4 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_5 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_6 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_7 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_8 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_9 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_10 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_11 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_12 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_13 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_14 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_15 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_done : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_idle : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ready : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ce : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage3_11001_ignoreCallOp51 : BOOLEAN;
    signal ap_block_state13_pp0_stage4_iter1_ignore_call43 : BOOLEAN;
    signal ap_block_pp0_stage4_11001_ignoreCallOp52 : BOOLEAN;
    signal ap_block_state14_pp0_stage5_iter1_ignore_call43 : BOOLEAN;
    signal ap_block_pp0_stage5_11001_ignoreCallOp53 : BOOLEAN;
    signal ap_block_pp0_stage6_11001_ignoreCallOp54 : BOOLEAN;
    signal ap_block_pp0_stage7_11001_ignoreCallOp55 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0_ignore_call43 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp56 : BOOLEAN;
    signal ap_block_pp0_stage1_11001_ignoreCallOp57 : BOOLEAN;
    signal ap_block_pp0_stage2_11001_ignoreCallOp58 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_onepulse_ap_start : STD_LOGIC;
    signal ap_block_pp0_stage0_ignoreCallOp16 : BOOLEAN;
    signal ap_block_pp0_stage2_ignoreCallOp34 : BOOLEAN;
    signal grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage3_ignoreCallOp51 : BOOLEAN;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_idle_pp0_0to0 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal layer4_out_0_ap_vld_int_regslice : STD_LOGIC;
    signal layer4_out_0_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_both_layer4_out_0_U_vld_out : STD_LOGIC;
    signal layer4_out_1_ap_vld_int_regslice : STD_LOGIC;
    signal layer4_out_1_ap_ack_int_regslice : STD_LOGIC;
    signal regslice_both_layer4_out_1_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component encoder_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        data_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_ce : IN STD_LOGIC );
    end component;


    component encoder_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_2 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_3 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_4 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_5 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_6 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_7 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_8 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_9 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_10 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_11 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_12 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_13 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_14 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_15 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_rst : IN STD_LOGIC );
    end component;


    component encoder_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_2_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_3_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_4_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_5_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_6_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_7_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_8_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_9_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_10_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_11_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_12_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_13_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_14_val : IN STD_LOGIC_VECTOR (15 downto 0);
        data_15_val : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component encoder_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54 : component encoder_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start,
        ap_done => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_done,
        ap_idle => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_idle,
        ap_ready => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ready,
        data_val => input_112,
        ap_return_0 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_1,
        ap_return_2 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_2,
        ap_return_3 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_3,
        ap_return_4 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_4,
        ap_return_5 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_5,
        ap_return_6 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_6,
        ap_return_7 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_7,
        ap_return_8 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_8,
        ap_return_9 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_9,
        ap_return_10 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_10,
        ap_return_11 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_11,
        ap_return_12 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_12,
        ap_return_13 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_13,
        ap_return_14 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_14,
        ap_return_15 => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_15,
        ap_ce => grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ce);

    call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60 : component encoder_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s
    port map (
        ap_ready => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_ready,
        data_0_val => layer2_out_reg_238,
        data_1_val => layer2_out_1_reg_243,
        data_2_val => layer2_out_2_reg_248,
        data_3_val => layer2_out_3_reg_253,
        data_4_val => layer2_out_4_reg_258,
        data_5_val => layer2_out_5_reg_263,
        data_6_val => layer2_out_6_reg_268,
        data_7_val => layer2_out_7_reg_273,
        data_8_val => layer2_out_8_reg_278,
        data_9_val => layer2_out_9_reg_283,
        data_10_val => layer2_out_10_reg_288,
        data_11_val => layer2_out_11_reg_293,
        data_12_val => layer2_out_12_reg_298,
        data_13_val => layer2_out_13_reg_303,
        data_14_val => layer2_out_14_reg_308,
        data_15_val => layer2_out_15_reg_313,
        ap_return_0 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_0,
        ap_return_1 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_1,
        ap_return_2 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_2,
        ap_return_3 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_3,
        ap_return_4 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_4,
        ap_return_5 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_5,
        ap_return_6 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_6,
        ap_return_7 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_7,
        ap_return_8 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_8,
        ap_return_9 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_9,
        ap_return_10 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_10,
        ap_return_11 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_11,
        ap_return_12 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_12,
        ap_return_13 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_13,
        ap_return_14 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_14,
        ap_return_15 => call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_15,
        ap_rst => ap_rst);

    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80 : component encoder_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start,
        ap_done => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_done,
        ap_idle => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_idle,
        ap_ready => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ready,
        ap_ce => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ce,
        data_0_val => layer3_out_reg_318,
        data_1_val => layer3_out_1_reg_323,
        data_2_val => layer3_out_2_reg_328,
        data_3_val => layer3_out_3_reg_333,
        data_4_val => layer3_out_4_reg_338,
        data_5_val => layer3_out_5_reg_343,
        data_6_val => layer3_out_6_reg_348,
        data_7_val => layer3_out_7_reg_353,
        data_8_val => layer3_out_8_reg_358,
        data_9_val => layer3_out_9_reg_363,
        data_10_val => layer3_out_10_reg_368,
        data_11_val => layer3_out_11_reg_373,
        data_12_val => layer3_out_12_reg_378,
        data_13_val => layer3_out_13_reg_383,
        data_14_val => layer3_out_14_reg_388,
        data_15_val => layer3_out_15_reg_393,
        ap_return_0 => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_1);

    regslice_both_layer4_out_0_U : component encoder_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_0,
        vld_in => layer4_out_0_ap_vld_int_regslice,
        ack_in => layer4_out_0_ap_ack_int_regslice,
        data_out => layer4_out_0,
        vld_out => regslice_both_layer4_out_0_U_vld_out,
        ack_out => layer4_out_0_ap_ack,
        apdone_blk => regslice_both_layer4_out_0_U_apdone_blk);

    regslice_both_layer4_out_1_U : component encoder_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        data_in => grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_return_1,
        vld_in => layer4_out_1_ap_vld_int_regslice,
        ack_in => layer4_out_1_ap_ack_int_regslice,
        data_out => layer4_out_1,
        vld_out => regslice_both_layer4_out_1_U_vld_out,
        ack_out => layer4_out_1_ap_ack,
        apdone_blk => regslice_both_layer4_out_1_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
                    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ready = ap_const_logic_1)) then 
                    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp16) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                layer2_out_10_reg_288 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_10;
                layer2_out_11_reg_293 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_11;
                layer2_out_12_reg_298 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_12;
                layer2_out_13_reg_303 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_13;
                layer2_out_14_reg_308 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_14;
                layer2_out_15_reg_313 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_15;
                layer2_out_1_reg_243 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_1;
                layer2_out_2_reg_248 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_2;
                layer2_out_3_reg_253 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_3;
                layer2_out_4_reg_258 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_4;
                layer2_out_5_reg_263 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_5;
                layer2_out_6_reg_268 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_6;
                layer2_out_7_reg_273 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_7;
                layer2_out_8_reg_278 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_8;
                layer2_out_9_reg_283 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_9;
                layer2_out_reg_238 <= grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_return_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                layer3_out_10_reg_368 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_10;
                layer3_out_11_reg_373 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_11;
                layer3_out_12_reg_378 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_12;
                layer3_out_13_reg_383 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_13;
                layer3_out_14_reg_388 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_14;
                layer3_out_15_reg_393 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_15;
                layer3_out_1_reg_323 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_1;
                layer3_out_2_reg_328 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_2;
                layer3_out_3_reg_333 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_3;
                layer3_out_4_reg_338 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_4;
                layer3_out_5_reg_343 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_5;
                layer3_out_6_reg_348 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_6;
                layer3_out_7_reg_353 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_7;
                layer3_out_8_reg_358 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_8;
                layer3_out_9_reg_363 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_9;
                layer3_out_reg_318 <= call_ret_relu_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_relu_config3_s_fu_60_ap_return_0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_block_pp0_stage7_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_reset_idle_pp0, ap_block_pp0_stage6_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_idle_pp0_1to1 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_reset_idle_pp0 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                elsif (((ap_reset_idle_pp0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp16_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0_ignore_call9)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp16 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_ignore_call9));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp56_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0_ignore_call43)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp56 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0_ignore_call43));
    end process;

        ap_block_pp0_stage0_ignoreCallOp16 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state1_pp0_stage0_iter0)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state1_pp0_stage0_iter0));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001_ignoreCallOp57 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_11001_ignoreCallOp58 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_ignoreCallOp34 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_11001_ignoreCallOp51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_ignoreCallOp51 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_pp0_stage4_iter1)
    begin
                ap_block_pp0_stage4_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state13_pp0_stage4_iter1));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_pp0_stage4_iter1, ap_block_state13_io)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_boolean_1 = ap_block_state13_pp0_stage4_iter1)));
    end process;


    ap_block_pp0_stage4_11001_ignoreCallOp52_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_io, ap_block_state13_pp0_stage4_iter1_ignore_call43)
    begin
                ap_block_pp0_stage4_11001_ignoreCallOp52 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state13_pp0_stage4_iter1_ignore_call43) or (ap_const_boolean_1 = ap_block_state13_io)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state13_pp0_stage4_iter1, ap_block_state13_io)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state13_io) or (ap_const_boolean_1 = ap_block_state13_pp0_stage4_iter1)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state14_pp0_stage5_iter1, ap_block_state14_io)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_boolean_1 = ap_block_state14_pp0_stage5_iter1)));
    end process;


    ap_block_pp0_stage5_11001_ignoreCallOp53_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state14_io, ap_block_state14_pp0_stage5_iter1_ignore_call43)
    begin
                ap_block_pp0_stage5_11001_ignoreCallOp53 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_pp0_stage5_iter1_ignore_call43) or (ap_const_boolean_1 = ap_block_state14_io)));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state14_pp0_stage5_iter1, ap_block_state14_io)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_io) or (ap_const_boolean_1 = ap_block_state14_pp0_stage5_iter1)));
    end process;

        ap_block_pp0_stage6_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_11001_ignoreCallOp54 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage6_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_11001_ignoreCallOp55 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage7_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state13_io_assign_proc : process(layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state13_io <= ((layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage4_iter1_assign_proc : process(layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state13_pp0_stage4_iter1 <= ((layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage4_iter1_ignore_call43_assign_proc : process(layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state13_pp0_stage4_iter1_ignore_call43 <= ((layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state14_io_assign_proc : process(layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state14_io <= ((layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state14_pp0_stage5_iter1_assign_proc : process(regslice_both_layer4_out_0_U_apdone_blk, regslice_both_layer4_out_1_U_apdone_blk, layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state14_pp0_stage5_iter1 <= ((regslice_both_layer4_out_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_layer4_out_0_U_apdone_blk = ap_const_logic_1) or (layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state14_pp0_stage5_iter1_ignore_call43_assign_proc : process(regslice_both_layer4_out_0_U_apdone_blk, regslice_both_layer4_out_1_U_apdone_blk, layer4_out_0_ap_ack_int_regslice, layer4_out_1_ap_ack_int_regslice)
    begin
                ap_block_state14_pp0_stage5_iter1_ignore_call43 <= ((regslice_both_layer4_out_1_U_apdone_blk = ap_const_logic_1) or (regslice_both_layer4_out_0_U_apdone_blk = ap_const_logic_1) or (layer4_out_1_ap_ack_int_regslice = ap_const_logic_0) or (layer4_out_0_ap_ack_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(input_112_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (input_112_ap_vld = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call43_assign_proc : process(input_112_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call43 <= (input_112_ap_vld = ap_const_logic_0);
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call9_assign_proc : process(input_112_ap_vld)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call9 <= (input_112_ap_vld = ap_const_logic_0);
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to0_assign_proc : process(ap_enable_reg_pp0_iter0)
    begin
        if ((ap_enable_reg_pp0_iter0 = ap_const_logic_0)) then 
            ap_idle_pp0_0to0 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to0)
    begin
        if (((ap_idle_pp0_0to0 = ap_const_logic_1) and (ap_start = ap_const_logic_0))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage3_11001_ignoreCallOp51, ap_block_pp0_stage4_11001_ignoreCallOp52, ap_block_pp0_stage5_11001_ignoreCallOp53, ap_block_pp0_stage6_11001_ignoreCallOp54, ap_block_pp0_stage7_11001_ignoreCallOp55, ap_block_pp0_stage0_11001_ignoreCallOp56, ap_block_pp0_stage1_11001_ignoreCallOp57, ap_block_pp0_stage2_11001_ignoreCallOp58, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage6)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage2_11001_ignoreCallOp58) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp57) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp56) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001_ignoreCallOp55) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001_ignoreCallOp54) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001_ignoreCallOp53) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001_ignoreCallOp52) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001_ignoreCallOp51) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)))) then 
            grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start <= grp_dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config4_s_fu_80_ap_start_reg;

    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage0_11001_ignoreCallOp16, ap_block_pp0_stage1_11001_ignoreCallOp17)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage1_11001_ignoreCallOp17) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp16) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start <= (grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_onepulse_ap_start or grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_ap_start_reg);

    grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_onepulse_ap_start_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_onepulse_ap_start <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_uint_1_ap_fixed_16_6_5_3_0_config2_s_fu_54_onepulse_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    input_112_ap_ack_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_112_ap_ack <= ap_const_logic_1;
        else 
            input_112_ap_ack <= ap_const_logic_0;
        end if; 
    end process;


    input_112_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, input_112_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_112_blk_n <= input_112_ap_vld;
        else 
            input_112_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer4_out_0_ap_vld <= regslice_both_layer4_out_0_U_vld_out;

    layer4_out_0_ap_vld_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            layer4_out_0_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            layer4_out_0_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    layer4_out_0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, layer4_out_0_ap_ack_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            layer4_out_0_blk_n <= layer4_out_0_ap_ack_int_regslice;
        else 
            layer4_out_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer4_out_1_ap_vld <= regslice_both_layer4_out_1_U_vld_out;

    layer4_out_1_ap_vld_int_regslice_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            layer4_out_1_ap_vld_int_regslice <= ap_const_logic_1;
        else 
            layer4_out_1_ap_vld_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    layer4_out_1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, layer4_out_1_ap_ack_int_regslice)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)))) then 
            layer4_out_1_blk_n <= layer4_out_1_ap_ack_int_regslice;
        else 
            layer4_out_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;

end behav;
